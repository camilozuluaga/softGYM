/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desarrollo;

import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.rowset.CachedRowSet;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import logica.DB;
import logica.Utilidades;
import net.sf.jcarrierpigeon.WindowPosition;
import net.sf.jtelegraph.Telegraph;
import net.sf.jtelegraph.TelegraphQueue;
import net.sf.jtelegraph.TelegraphType;

/**
 *
 * @author Gidsoft
 */
public final class AgregarMembresia extends javax.swing.JFrame {

    int key; // id del registro almacenado en membresia_datos. Lo usamos en pago membresia para saber que membresia se esta pagando.
    Utilidades util;
    int usuario_sistema;
    float resultado;
    private final DB db = new DB();
    private final Utilidades utilidades = new Utilidades();
    String membresiaSeleccionada;
    CachedRowSet data;
    int porcentaje;
    int cantidad; //cantidad que dura la membresía
    String unidad; // unidad de la cantidad que dura la membresía
    double valorDescuento;
    double valor;
    boolean puede_seguir = true;
    boolean persistir; // este boolean será falso si hay problemas con alguna validación; entonces no se persistirá
    boolean flag = true; //banderita para decir si mostrar el aviso de éxito o no.
    float descuento_total;
    private final int SocioID;
    private final VerSocio socio;

    /**
     * Creates new form AgregarMembresia
     *
     * @param socioID
     * @param socio
     */
    public AgregarMembresia(int socioID, VerSocio socio) throws SQLException {
        initComponents();
        checkRenovarMembresia.setVisible(false);
        // on_change de dateComienzaMembresia (JDateChooser)
        dateComienzaMembresia.getDateEditor().addPropertyChangeListener(
                new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent e) {
                if ("date".equals(e.getPropertyName())) {
                    onchange_rango();
                }
            }
        });
        this.socio = socio;
        this.SocioID = socioID;
        this.setAlwaysOnTop(true);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
        obtenerMembresiasActivas();
        obtenerDatosMembresia();
        tablaAgregarMembresia.setEnabled(false);
        checkRenovarMembresia.setEnabled(false);
        dateComienzaMembresia.setDate(new Date());
        usuario_sistema = Integer.parseInt(System.getProperty("usuario_sistema"));
        util = new Utilidades();

    }

    /**
     * Esta funcion permite calcular el rango de vencimiento de una membresía.
     */
    private void onchange_rango() {
        Calendar cal = new GregorianCalendar();
        int cantidadDias = 0; //mensualidad 30 dias, quincena 15 dias, anualidad 365 dias, semana 7 dias...

        switch (unidad) {
            case "Años":
                cantidadDias = 365 * cantidad;
                break;
            case "Meses":
                cantidadDias = 30 * cantidad;
                break;
            case "Dias":
                cantidadDias = cantidad;
                break;
        }
        cal.setTimeInMillis(dateComienzaMembresia.getDate().getTime());
        cal.add(Calendar.DATE, cantidadDias);
        dateTerminaMembresia.setDate(cal.getTime());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoAplicarDescuento = new javax.swing.ButtonGroup();
        grupoDescuento = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        checkRenovarMembresia = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        txtCostoInscripcion = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAgregarMembresia = new javax.swing.JTable();
        cboMembresia = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        dateComienzaMembresia = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        dateTerminaMembresia = new com.toedter.calendar.JDateChooser();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        rNo = new javax.swing.JRadioButton();
        rSi = new javax.swing.JRadioButton();
        rPorcentajeDescuento = new javax.swing.JRadioButton();
        rDescuentoCantidad = new javax.swing.JRadioButton();
        txtPorcentajeDescuento = new javax.swing.JTextField();
        txtCantidadDescuento = new javax.swing.JTextField();
        lblPorcentaje = new javax.swing.JLabel();
        lblMotivoDescuento = new javax.swing.JLabel();
        txtMotivoDescuento = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Agregar Membresía");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/hoja.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setText("Permite añadir un plan o membresía a un socio.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        checkRenovarMembresia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        checkRenovarMembresia.setText("Renovar automaticamente cuando finalice o expire.");
        checkRenovarMembresia.setToolTipText("Cuando esta membresía expire, se volverá a asignar automaticame al socio.");
        checkRenovarMembresia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkRenovarMembresiaActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Costo De Inscripción");

        btnGuardar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        txtCostoInscripcion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCostoInscripcion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCostoInscripcionFocusGained(evt);
            }
        });
        txtCostoInscripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCostoInscripcionActionPerformed(evt);
            }
        });
        txtCostoInscripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCostoInscripcionKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCostoInscripcionKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCostoInscripcionKeyTyped(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Membresía", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        tablaAgregarMembresia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaAgregarMembresia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaAgregarMembresia);

        cboMembresia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboMembresia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMembresiaItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Seleccione Una Membresía");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboMembresia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboMembresia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vigencia", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("¿En Qué Fecha Comienza Esta Membresía?");

        dateComienzaMembresia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("¿En Qué Fecha Termina o Expira Esta Membresía?");

        dateTerminaMembresia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateComienzaMembresia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateTerminaMembresia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dateComienzaMembresia, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(dateTerminaMembresia, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Descuento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Aplicar Descuento");

        grupoAplicarDescuento.add(rNo);
        rNo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rNo.setSelected(true);
        rNo.setText("No");
        rNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rNoActionPerformed(evt);
            }
        });

        grupoAplicarDescuento.add(rSi);
        rSi.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rSi.setText("Si");
        rSi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSiActionPerformed(evt);
            }
        });

        grupoDescuento.add(rPorcentajeDescuento);
        rPorcentajeDescuento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rPorcentajeDescuento.setSelected(true);
        rPorcentajeDescuento.setText("Porcentaje de descuento");
        rPorcentajeDescuento.setEnabled(false);
        rPorcentajeDescuento.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                rPorcentajeDescuentoComponentHidden(evt);
            }
        });
        rPorcentajeDescuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPorcentajeDescuentoActionPerformed(evt);
            }
        });

        grupoDescuento.add(rDescuentoCantidad);
        rDescuentoCantidad.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rDescuentoCantidad.setText("Descuento basado en valor");
        rDescuentoCantidad.setEnabled(false);
        rDescuentoCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rDescuentoCantidadActionPerformed(evt);
            }
        });

        txtPorcentajeDescuento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPorcentajeDescuento.setText("0");
        txtPorcentajeDescuento.setEnabled(false);
        txtPorcentajeDescuento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPorcentajeDescuentoFocusGained(evt);
            }
        });
        txtPorcentajeDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPorcentajeDescuentoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPorcentajeDescuentoKeyReleased(evt);
            }
        });

        txtCantidadDescuento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCantidadDescuento.setEnabled(false);
        txtCantidadDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCantidadDescuentoKeyReleased(evt);
            }
        });

        lblPorcentaje.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPorcentaje.setText("%");
        lblPorcentaje.setEnabled(false);

        lblMotivoDescuento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblMotivoDescuento.setText("Motivo Por El Descuento");
        lblMotivoDescuento.setEnabled(false);

        txtMotivoDescuento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtMotivoDescuento.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(rNo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rSi)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(rDescuentoCantidad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCantidadDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(rPorcentajeDescuento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPorcentajeDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPorcentaje))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblMotivoDescuento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMotivoDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(172, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rNo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rSi)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rPorcentajeDescuento)
                            .addComponent(txtPorcentajeDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPorcentaje))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rDescuentoCantidad)
                            .addComponent(txtCantidadDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMotivoDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMotivoDescuento))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(txtCostoInscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(checkRenovarMembresia))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtCostoInscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkRenovarMembresia))
                    .addComponent(btnGuardar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkRenovarMembresiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRenovarMembresiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkRenovarMembresiaActionPerformed

    private void rSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSiActionPerformed
        mostarComponentes(true);
    }//GEN-LAST:event_rSiActionPerformed

    private void rNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rNoActionPerformed
        mostarComponentes(false);
    }//GEN-LAST:event_rNoActionPerformed

    private void rPorcentajeDescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPorcentajeDescuentoActionPerformed
        txtPorcentajeDescuento.requestFocus();
        txtPorcentajeDescuento.setEnabled(true);
        txtCantidadDescuento.setEnabled(false);

    }//GEN-LAST:event_rPorcentajeDescuentoActionPerformed

    private void rDescuentoCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rDescuentoCantidadActionPerformed
        txtCantidadDescuento.requestFocus();
        txtCantidadDescuento.setEnabled(true);
        txtPorcentajeDescuento.setEnabled(false);
    }//GEN-LAST:event_rDescuentoCantidadActionPerformed

    private void cboMembresiaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMembresiaItemStateChanged
        try {
            membresiaSeleccionada = cboMembresia.getSelectedItem().toString();
            obtenerDatosMembresia();
            fechaexpiracion();
        } catch (SQLException ex) {
            Logger.getLogger(AgregarMembresia.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_cboMembresiaItemStateChanged

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        int costoInscripcion = txtCostoInscripcion.getText().length();

        try {
            if (validarInscripcion()) {
                try {
                    boolean validacion = utilidades.validarFechaRegistro(utilidades.fecha_apertura(), utilidades.obtnerFechaActual());
                    
                    if (validacion == false) {
                        JOptionPane.showMessageDialog(this, "NO SE HA AGREGADO LA MEMBRESIA", "AGREGANDO MEMBRESIA", JOptionPane.WARNING_MESSAGE);
                        Telegraph tele = new Telegraph("Cierre Caja", "No se puede agregar la membresia. \n La fecha actual es menor que la fecha de apertura", TelegraphType.NOTIFICATION_WARNING, WindowPosition.TOPRIGHT, 9000);
                        TelegraphQueue q = new TelegraphQueue();
                        q.add(tele);
                    } else {
                        guardar();
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(RegistrarEgreso.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                Telegraph tele = new Telegraph("REGISTRO MEMBRESIA", "NO SE HA PODIDO AGREGAR LA MEMBRESIA \n HA SOBREPASASO EL VALOR DE LA MEMBRESIA", TelegraphType.NOTIFICATION_ERROR, WindowPosition.TOPRIGHT, 5000);
                TelegraphQueue q = new TelegraphQueue();
                q.add(tele);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AgregarMembresia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtCostoInscripcionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostoInscripcionKeyReleased
        utilidades.validarCampoNumericos("Solo debe ingresar números en este campo", txtCostoInscripcion);        // TODO add your handling code here:
    }//GEN-LAST:event_txtCostoInscripcionKeyReleased

    private void txtPorcentajeDescuentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcentajeDescuentoKeyReleased
        utilidades.validarCampoNumericos("Solo debe ingresar números en este campo", txtPorcentajeDescuento, 3);
    }//GEN-LAST:event_txtPorcentajeDescuentoKeyReleased

    private void txtCantidadDescuentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadDescuentoKeyReleased
        utilidades.validarCampoNumericos("Solo debe ingresar números en este campo", txtCantidadDescuento);          // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadDescuentoKeyReleased

    private void txtCostoInscripcionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCostoInscripcionFocusGained

    }//GEN-LAST:event_txtCostoInscripcionFocusGained

    private void txtPorcentajeDescuentoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcentajeDescuentoFocusGained
        if (txtPorcentajeDescuento.getText().trim().equals("0")) {
            txtPorcentajeDescuento.setText("");
        }
    }//GEN-LAST:event_txtPorcentajeDescuentoFocusGained

    private void rPorcentajeDescuentoComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_rPorcentajeDescuentoComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_rPorcentajeDescuentoComponentHidden

    private void txtPorcentajeDescuentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcentajeDescuentoKeyPressed
        if (txtPorcentajeDescuento.getText().length() >= 2) {
            txtPorcentajeDescuento.setText(txtPorcentajeDescuento.getText().substring(0, 1));
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtPorcentajeDescuentoKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

    }//GEN-LAST:event_formKeyPressed

    private void txtCostoInscripcionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostoInscripcionKeyPressed

    }//GEN-LAST:event_txtCostoInscripcionKeyPressed

    private void txtCostoInscripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCostoInscripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCostoInscripcionActionPerformed

    private void txtCostoInscripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostoInscripcionKeyTyped

    }//GEN-LAST:event_txtCostoInscripcionKeyTyped

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox cboMembresia;
    private javax.swing.JCheckBox checkRenovarMembresia;
    private com.toedter.calendar.JDateChooser dateComienzaMembresia;
    private com.toedter.calendar.JDateChooser dateTerminaMembresia;
    private javax.swing.ButtonGroup grupoAplicarDescuento;
    private javax.swing.ButtonGroup grupoDescuento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMotivoDescuento;
    private javax.swing.JLabel lblPorcentaje;
    private javax.swing.JRadioButton rDescuentoCantidad;
    private javax.swing.JRadioButton rNo;
    private javax.swing.JRadioButton rPorcentajeDescuento;
    private javax.swing.JRadioButton rSi;
    private javax.swing.JTable tablaAgregarMembresia;
    private javax.swing.JTextField txtCantidadDescuento;
    private javax.swing.JTextField txtCostoInscripcion;
    private javax.swing.JTextField txtMotivoDescuento;
    private javax.swing.JTextField txtPorcentajeDescuento;
    // End of variables declaration//GEN-END:variables

    private void mostarComponentes(boolean visibilidad) {
        rPorcentajeDescuento.setEnabled(visibilidad);
        rDescuentoCantidad.setEnabled(visibilidad);
        lblMotivoDescuento.setEnabled(visibilidad);
        txtMotivoDescuento.setEnabled(visibilidad);
        txtPorcentajeDescuento.setEnabled(visibilidad);
        lblPorcentaje.setEnabled(visibilidad);
    }

    public void guardar() {
        try {
            calcularDescuento();//calcula el valor total de membresía con costo de inscripción y teniendo en cuenta el descuento, etc.
            persistirAgregarMembresia(); //membresia usuario
            if (persistir) {
                persistirDatos(); //membresia datos
                persistirPago();// membresia pago
                socio.updateDatos(); //Actualizar Ventana del Usuario
                persistir = false;
            }

        } catch (SQLException | ParseException ex) {
            Logger.getLogger(AgregarMembresia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean desactivarMembresiasVencidas(int id) throws SQLException {
        CachedRowSet dataPromocional;
        Calendar c1 = Calendar.getInstance();
        String dia = Integer.toString(c1.get(Calendar.DATE));
        String mes = Integer.toString(c1.get(Calendar.MONTH) + 1);
        String anio = Integer.toString(c1.get(Calendar.YEAR));
        try {
            DB miDb = new DB();
            dataPromocional = miDb.sqlDatos("SELECT fecha_expiracion FROM membresia_promocional WHERE membresia_id="+id+"");
            String fecha;
            while (dataPromocional.next()) {
                fecha = dataPromocional.getDate("fecha_expiracion").toString();
                String datos[] = fecha.split("-");
                
                for (int i = 0; i < datos.length; i++) {
                    System.out.println(datos[i]);
                }
                System.out.println("anio"+anio);
                System.out.println("datos"+datos[0]);
                if ((Integer.parseInt(anio) > Integer.parseInt(datos[0]))) {
                    return false;
                } else if ((Integer.parseInt(anio) == Integer.parseInt(datos[0]))) {
                    if ((Integer.parseInt(mes) > Integer.parseInt(datos[1]))) {
                        return false;
                    } else if ((Integer.parseInt(mes) == Integer.parseInt(datos[1]))) {
                        if ((Integer.parseInt(dia) > Integer.parseInt(datos[2]))) {
                            return false;
                        } else {
                            return true;
                        }
                    } else {
                        return false;
                    }
                }

            }
        } catch (Exception ex) {
            Logger.getLogger(RegistrarPagoMembresia.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    
    private void obtenerMembresiasActivas() throws SQLException {
        CachedRowSet data;
        try {
            DB miDb = new DB();
            data = miDb.sqlDatos("SELECT nombre,id FROM membresia where estado=True");
            String valorAdquirido;
            int id;
            cboMembresia.removeAllItems();
            while (data.next()) {
                id=data.getInt("id");
                valorAdquirido = data.getString("nombre");
                System.out.println("Vencida: "+ desactivarMembresiasVencidas(id));
                if(desactivarMembresiasVencidas(id)){
                cboMembresia.addItem(valorAdquirido);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(RegistrarPagoMembresia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void obtenerDatosMembresia() throws SQLException {
        int entradas = 0;
        DefaultTableModel dtmEjemplo = new DefaultTableModel(null, new String[]{"Nombre", "Duración Membresía", "Costo", "Entradas por día"});
        tablaAgregarMembresia.setModel(dtmEjemplo);
        DB miDb = new DB();

        String sqlSentence = String.format("SELECT membresia.nombre, concat(duracion,'  ', unidad) , membresia.valor FROM membresia, membresia_duracion where membresia_duracion.membresia_id= membresia.id and nombre='%s';", membresiaSeleccionada);

        data = miDb.sqlDatos(sqlSentence);
        logica.Utilidades.llenarTabla(data.createCopy(), dtmEjemplo, tablaAgregarMembresia);

        String sqlSentence1 = String.format("select membresia.asistencia_diaria as asistencia from membresia where nombre='%s';", membresiaSeleccionada);
        data = miDb.sqlDatos(sqlSentence1);
        while (data.next()) {
            if (data.getInt("asistencia") == -1) {
                dtmEjemplo.setValueAt("Sin límite", 0, 3);
            } else {
                dtmEjemplo.setValueAt(data.getInt("asistencia") / 2, 0, 3);
            }

        }
    }

    @SuppressWarnings("unchecked")
    private void persistirAgregarMembresia() throws ParseException {
        try {
            int membresia_id = 0; //OBTENIENDO ID DE LA MEMBRESIA
            DB miDb = new DB();
            String querySQL1 = String.format("SELECT id FROM membresia WHERE nombre='%s'", membresiaSeleccionada);
            data = miDb.sqlDatos(querySQL1);
            while (data.next()) {
                membresia_id = data.getInt("id");
            }
            // FIN OBTENIENDO ID DE LA MEMBRESIA
            int socio_id = SocioID;
            int usuario_del_sistema = Integer.parseInt(System.getProperty("usuario_sistema"));
            String activa = "TRUE";
            validarCantidadDescuento();
            validarPorcentajeDescuento();
            String fechaInicia = Utilidades.formatearFecha(dateComienzaMembresia.getDate(), "yyyy-MM-dd");
            System.out.println("FECHA INICIA: "+fechaInicia);
            if(validarAcceso(socio_id, fechaInicia)){
            if (puede_seguir || rNo.isEnabled()) {
                String querySQL = String.format("INSERT INTO membresia_usuario (socio_id, membresia_id, usuario_sistema_id, activa, fecha_registro) VALUES (%s,%s,%s,%s, now())", socio_id, membresia_id, usuario_del_sistema, activa);
                boolean success = db.sqlEjec(querySQL);
                System.out.println("Se realizo el registro? = " + success);
                if (success && flag) {
                    this.dispose();
                    Telegraph tele = new Telegraph("¡Exito!", "Se ha agregado una membresía al socio.", TelegraphType.NOTIFICATION_DONE, WindowPosition.TOPRIGHT, 9000);
                    TelegraphQueue q = new TelegraphQueue();
                    q.add(tele);
                }

                flag = true;

            }
            }else{
                 Telegraph tele = new Telegraph("¡ERROR!", "La fecha de inicio no es la correcta.", TelegraphType.NOTIFICATION_ERROR, WindowPosition.TOPRIGHT, 9000);
                    TelegraphQueue q = new TelegraphQueue();
                    q.add(tele);
            }

        } catch (SQLException ex) {
            Logger.getLogger(AgregarMembresia.class.getName()).log(Level.SEVERE, null, ex);

        }
    }

    public void validarPorcentajeDescuento() {
        if (rSi.isSelected() && rPorcentajeDescuento.isSelected()) {
            if (!txtPorcentajeDescuento.getText().trim().isEmpty() || (txtPorcentajeDescuento.getText().equals("0"))) {
                porcentaje = Integer.parseInt(txtPorcentajeDescuento.getText());
                puede_seguir = true;
            } else {
                utilidades.llamarMensaje("porcentaje");
                puede_seguir = false;
            }
        }

    }

    public void validarCantidadDescuento() {

        if ((rSi.isSelected() && rDescuentoCantidad.isSelected()) && (!txtCantidadDescuento.getText().trim().isEmpty())) {
            valorDescuento = Double.parseDouble(txtCantidadDescuento.getText());
            puede_seguir = true;
        } else if (rSi.isSelected() && rDescuentoCantidad.isSelected() == false) {
            puede_seguir = true;
        } else {
            utilidades.llamarMensaje("Descuento Basado en Cantidad");
            puede_seguir = false;
        }
    }

    public void fechaexpiracion() throws SQLException {
        DB miDb = new DB();
        String sqlSentence = String.format("select nombre, duracion, unidad from membresia, membresia_duracion where membresia_id = membresia.id and  nombre='%s';", membresiaSeleccionada);
        data = miDb.sqlDatos(sqlSentence);
        while (data.next()) {
            cantidad = data.getInt("duracion");
            unidad = data.getString("unidad");
        }
        final int semana = 7;
        final int mes = 30;
        final int año = 365;
        int calculo = 0;
        Date fecha = new Date();
        switch (this.unidad) {
            case "Semanas":
                calculo = semana * cantidad;
                break;
            case "Meses":
                calculo = mes * cantidad;
                break;
            case "Años":
                calculo = año * cantidad;
                break;
            case "Visitas":
            case "Dias":
                calculo = cantidad;
                break;
        }
        dateTerminaMembresia.cleanup();
        dateTerminaMembresia.setDate(calcularFechaExpiracion(fecha, calculo));

    }

    public Date calcularFechaExpiracion(Date fch, int dias) {
        Calendar cal = new GregorianCalendar();
        cal.setTimeInMillis(fch.getTime());
        cal.add(Calendar.DATE, +dias);
        return new Date(cal.getTimeInMillis());
    }

    public boolean validarInscripcion() throws SQLException {
        if (!txtCostoInscripcion.getText().trim().isEmpty()) {
            double costo = Double.parseDouble(txtCostoInscripcion.getText());

            double valorMembresia = ValorMembresia();
            if (costo >= valorMembresia) {
                return false;
            } 
        }
        return true;
    }

    public void calcularDescuento() throws SQLException {

        float inscripcion = 0;
        float porcentajeDescuento = 0;
        float calculo;
        float calculo1;
        float resultadoSinDescuento;
        double descuentoDinero = 0;

        if (rSi.isEnabled() && txtPorcentajeDescuento.isEnabled()) {
            if (!txtCostoInscripcion.getText().trim().isEmpty()) {
                inscripcion = (float) Double.parseDouble(txtCostoInscripcion.getText());
            } else {
                inscripcion = 0;
            }

            if (!txtPorcentajeDescuento.getText().trim().isEmpty()) {
                porcentajeDescuento = Integer.parseInt(txtPorcentajeDescuento.getText());
            }
            if (!txtCostoInscripcion.getText().trim().isEmpty()) {
                inscripcion = (float) Double.parseDouble(txtCostoInscripcion.getText());
            }
            resultadoSinDescuento = (float) (ValorMembresia() + inscripcion);
            calculo = porcentajeDescuento / 100;
            calculo1 = (float) (resultadoSinDescuento * calculo);
            descuento_total = calculo1;
            resultado = (float) (resultadoSinDescuento - calculo1);
            persistir = true;
            if (resultado > 0) {
                System.out.println("descuentoDinero = " + descuentoDinero);
            }

        } else if (rSi.isEnabled() && rDescuentoCantidad.isEnabled()) {
            if (!txtCantidadDescuento.getText().trim().isEmpty()) {
                descuentoDinero = Double.parseDouble(txtCantidadDescuento.getText());
                descuento_total = (float) descuentoDinero;

                double valorMembresia = ValorMembresia();
                if (descuentoDinero >= valorMembresia) {
                    persistir = false;
                    flag = false;

                    Telegraph miTelegraph = new Telegraph("Error", "El descuento no puede ser igual o superior al valor de la membresía", TelegraphType.NOTIFICATION_ERROR, WindowPosition.TOPRIGHT, 4000);
                    miTelegraph.animate();
                } else {
                    persistir = true;

                }
            }
            if (!txtCostoInscripcion.getText().trim().isEmpty()) {
                inscripcion = (float) Double.parseDouble(txtCostoInscripcion.getText());
                calculo = (float) (ValorMembresia() + inscripcion);
                resultado = (float) ((float) calculo - descuentoDinero);

                if (resultado > 0) {
                    System.out.println("descuentoDinero = " + resultado);
                }
            } else {
                descuentoDinero = Double.parseDouble(txtCantidadDescuento.getText());
                descuento_total = (float) descuentoDinero;
                resultado = (float) ((float) ValorMembresia() - descuentoDinero);

                if (resultado > 0) {
                    System.out.println("descuentoDinero = " + resultado);
                }
            }

        } else if (rNo.isSelected()) {
            if (!txtCostoInscripcion.getText().trim().isEmpty()) {
                inscripcion = (float) Double.parseDouble(txtCostoInscripcion.getText());
                this.resultado = (float) (ValorMembresia() + inscripcion);
                persistir = true;
            } else {
                inscripcion = 0;
                this.resultado = (float) ValorMembresia();

                persistir = true;

            }
        }
    }

    public double ValorMembresia() throws SQLException { // CONSULTAMOS EL VALOR DE LA MEMBRESÍA
        DB miDb = new DB();
        String sqlSentence = String.format("select valor  from membresia where  nombre='%s';", membresiaSeleccionada);
        data = miDb.sqlDatos(sqlSentence);
        while (data.next()) {
            valor = data.getDouble("Valor");
        }
        return valor;
    }

    private void persistirDatos() throws SQLException, ParseException {
        float inscripcion = 0;
        String estado = "Sin Cancelar";
        boolean renovar;
        double descuentoTotal = descuento_total;
        String fechaInicia = Utilidades.formatearFecha(dateComienzaMembresia.getDate(), "yyyy-MM-dd");
        String fechaTermina = Utilidades.formatearFecha(dateTerminaMembresia.getDate(), "yyyy-MM-dd");
        int id = 0; // Obteniendo id de membresía_usuario
        String motivoDescuento = null;
        DB miDb = new DB();
        data = miDb.sqlDatos("SELECT MAX(id) FROM membresia_usuario;");
        while (data.next()) {
            id = data.getInt(1);
            System.out.println("Id de membresia: " + id);
        }
        if (checkRenovarMembresia.isSelected()) { // Renovar Membresía
            renovar = true;
        } else {
            renovar = false;
        }
        if (!txtCostoInscripcion.getText().trim().isEmpty()) { //PRECIO DE INSCRIPCION
            inscripcion = (float) Double.parseDouble(txtCostoInscripcion.getText());
        }
        if (!txtMotivoDescuento.getText().trim().isEmpty()) { //PRECIO DE INSCRIPCION
            motivoDescuento = txtMotivoDescuento.getText();
        } else {
            motivoDescuento = "No registra";
        }

        // Insercion en membresía_datos
        CachedRowSet dataMembresia, dataUsuario;
        int contador = 0, idUsuario = 0;
        
        String sql = String.format("SELECT socio_id FROM membresia_usuario WHERE id=%s;",id);
        dataUsuario = db.sqlDatos(sql);
        while(dataUsuario.next()){
        idUsuario=dataUsuario.getInt("socio_id");
        }
        if(validarAcceso(idUsuario, fechaInicia)){
        }else{
            return;
        }
        String sql2 = "SELECT count(mu.membresia_id) as cantidad FROM membresia_datos md, membresia_usuario mu where now() between md.fecha_inicio_membresia + interval '1h'  and md.fecha_fin_membresia + interval '23h'  and md.membresia_socio_id=mu.id and md.activa=true  and mu.socio_id="+idUsuario;
        dataMembresia = db.sqlDatos(sql2);
        while(dataMembresia.next()){
        contador=dataMembresia.getInt("cantidad");
        }
        System.out.println("sql2 agregar membresia"+sql2);
        
        if(contador!=0){
        String querySQL = String.format("INSERT INTO membresia_datos (membresia_socio_id, usuario_sistema_id, fecha_asignacion, fecha_inicio_membresia, fecha_fin_membresia, renovar, costo_inscripcion, descuento, descuento_observacion, costo_membresia, estado, fecha_registro,activa) VALUES (%s,%s, now(), '%s', '%s', %s, %s, %s, '%s', %s, '%s', now(),false);", id, usuario_sistema, fechaInicia, fechaTermina, renovar, inscripcion, descuentoTotal, motivoDescuento, ValorMembresia(), estado);
        boolean success = db.sqlEjec(querySQL);
        key = db.getKeys();
        System.out.println("El descuento es: " + descuentoTotal);
        System.out.println("Se realizo el registro? = " + success);
        }else{
        String querySQL = String.format("INSERT INTO membresia_datos (membresia_socio_id, usuario_sistema_id, fecha_asignacion, fecha_inicio_membresia, fecha_fin_membresia, renovar, costo_inscripcion, descuento, descuento_observacion, costo_membresia, estado, fecha_registro,activa) VALUES (%s,%s, now(), '%s', '%s', %s, %s, %s, '%s', %s, '%s', now(),true);", id, usuario_sistema, fechaInicia, fechaTermina, renovar, inscripcion, descuentoTotal, motivoDescuento, ValorMembresia(), estado);
        boolean success = db.sqlEjec(querySQL);
        key = db.getKeys();
        System.out.println("El descuento es: " + descuentoTotal);
        System.out.println("Se realizo el registro? = " + success);
        }

    }

    private void persistirPago() {
        String querySQL = String.format("INSERT INTO pago_membresia (fecha_pago, socio_id, usuario_sistema_id, valor_adquirido, pago, saldo, fecha_registro, membresiadatos_id) VALUES (now(), %s, %s, %s, %s, %s, now(), %s);", SocioID, usuario_sistema, resultado, 0.0, resultado, key);
        boolean success = db.sqlEjec(querySQL);
        System.out.println("Persistio en membresia pago? = " + success);
    }

        public boolean validarAcceso(int idUsuario,String fechaInicio) throws ParseException, SQLException {
        CachedRowSet data1,data2;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fecha = "";
        String querySQL = "SELECT id FROM membresia_usuario WHERE socio_id="+idUsuario;
        data1 = db.sqlDatos(querySQL);
            System.out.println("query: "+querySQL);
        int idMembresia;
            while (data1.next()) {
                idMembresia = data1.getInt("id");
                String sql = "SELECT fecha_fin_membresia FROM membresia_datos WHERE membresia_socio_id=" + idMembresia;
                System.out.println("SQL: "+sql);
                data2 = db.sqlDatos(sql); 
                while(data2.next()){
                    fecha = data2.getDate("fecha_fin_membresia").toString();
                    System.out.println("La fecha de la bd es: " + fecha);
                    System.out.println("Esta es la fecha inicio membresia: " + fechaInicio);
                    Date date1 = sdf.parse(fechaInicio);
                    Date date2 = sdf.parse(fecha);
                    System.out.println("La fecha de la bd es: " + fecha);
                    System.out.println("Esta es la fecha inicio membresia: " + fechaInicio);
                    int v = date2.compareTo(date1);
                    if (v == 1) {
                        return false;
                    }
                }

            }



            return true;
        
        }
}
