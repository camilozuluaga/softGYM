/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desarrollo;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.rowset.CachedRowSet;
import javax.swing.table.DefaultTableModel;
import logica.DB;

/**
 *
 * @author Usuario
 */
public class CajaDetalleMembresia extends javax.swing.JInternalFrame {

    /**
     * Creates new form DetalleIngreso
     */
    logica.Utilidades utilidades = new logica.Utilidades();

    private DB db = new DB();

    public CajaDetalleMembresia(String id, String fecha_apertura, String fecha) {
        System.out.println("El id caja es: " + id);
        initComponents();
        cargarMembresias(id, fecha_apertura, fecha);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaIngresos = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Detalles Cierre De Caja (Membresias)");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/hoja.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Visualizar detalles de Cierre Caja (Membresias)");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setText("Permite detallar las membresias de un cierre de caja.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(114, 114, 114))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tablaIngresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaIngresos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaIngresos;
    // End of variables declaration//GEN-END:variables

    private void cargarMembresias(String id_caja, String fecha_apertura, String fecha_cierre) {
        CachedRowSet data;
        String nombre_usuario;
        int usuario;
        nombre_usuario = System.getProperty("usuario_sistema");
        usuario = Integer.parseInt(nombre_usuario);

        String nombre_socio;
        int socio;
        nombre_socio = System.getProperty("socio_id");

        try {
            DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"USUARIO", "NOMBRE SOCIO", "MEMBRESIA", "VALOR DE LA MEMBRESIA", "DESCUENTO", "HORA DEL INGRESO"});
            /***
             * Se corrigio esta linea ya que no es valor adquirido si no el pago que se efectuo
             * "SELECT sis.primer_nombre ||' ' ||sis.primer_apellido AS \"USUARIO\", s.primer_nombre || ' ' ||  s.segundo_nombre || ' ' || s.primer_apellido || ' ' || s.segundo_apellido AS \"Nombre Socio\", memb.nombre AS \"TIPO DE PAGO\", mem.valor_adquirido - f.saldo_favor_uso AS \"VALOR MEMBRESIA\", mem_d.descuento AS \"Descuento\", f.fecha_registro AS \"Fecha Registro\", ''  \n"
             */
            
            String sqlQuery = "SELECT sis.primer_nombre ||' ' ||sis.primer_apellido AS \"USUARIO\", s.primer_nombre || ' ' ||  s.segundo_nombre || ' ' || s.primer_apellido || ' ' || s.segundo_apellido AS \"Nombre Socio\", memb.nombre AS \"TIPO DE PAGO\", mem.Pago AS \"VALOR MEMBRESIA\", mem_d.descuento AS \"Descuento\", f.fecha_registro AS \"Fecha Registro\", ''  \n"
                    + "FROM pago_membresia mem, caja ca, factura f, usuario_sistema sis, membresia_datos mem_d, membresia_usuario mem_u, membresia memb, socio s \n"
                    + "WHERE  mem.fecha_pago >= ca.fecha_apertura\n"
                    + "AND mem.fecha_registro >='" + fecha_apertura + "' \n"
                    + "AND mem.fecha_registro <='" + fecha_cierre + "' \n"
                    + "AND pago <> 0.0 \n"
                    + "AND mem.valor_adquirido - f.saldo_favor_uso <> 0.0 \n"
                    + "AND sis.id = f.usuario_sistema_id \n"
                    + "AND f.socio_id = s.id \n"
                    + "AND mem.factura_id = f.id \n"
                    + "AND mem.membresiadatos_id = mem_d.id \n"
                    + "AND mem_d.membresia_socio_id = mem_u.id \n"
                    + "AND mem_u.membresia_id = memb.id\n"
                    + "AND ca.id= " + id_caja + "\n"
                    + "UNION \n"
                    + "SELECT sis.primer_nombre ||' ' ||sis.primer_apellido AS \"USUARIO\", s.primer_nombre || ' ' ||  s.segundo_nombre || ' ' || s.primer_apellido || ' ' || s.segundo_apellido AS \"Nombre Socio\",'Uso Saldo a Favor' :: text,sf.valor_caja * -1 AS Dinero, 0, sf.fecha_registro,' ' \n"
                    + "FROM saldofavor sf, usuario_sistema sis, socio s \n"
                    + "WHERE sf.id IN (SELECT Max(sf.id) \n"
                    + "FROM saldofavor sf, caja c \n"
                    + "WHERE sf.caja_id = c.id \n"
                    + "AND c.id= " + id_caja + "\n"
                    + "AND sf.socio_id IN (SELECT sf.socio_id \n"
                    + "FROM saldofavor sf, caja c \n"
                    + "WHERE sf.caja_id = c.id \n"
                    + "AND c.id= " + id_caja + "\n"
                    + "GROUP  BY sf.valor, sf.valor_caja, sf.id \n"
                    + "HAVING sf.valor - sf.valor_caja <= 0) \n"
                    + "GROUP  BY sf.socio_id) \n"
                    + "AND sf.valor_caja < 0 \n"
                    + "AND sis.id = sf.usuario_sistema_id \n"
                    + "AND s.id = sf.socio_id ";

            System.out.println("La consulta de solo membresia es: " + sqlQuery);
            data = db.sqlDatos(sqlQuery);
            tablaIngresos = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tablaIngresos);

        } catch (Exception ex) {
            Logger.getLogger(RegistrarPagoMembresia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
