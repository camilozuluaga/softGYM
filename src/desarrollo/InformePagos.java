/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desarrollo;

import com.toedter.calendar.JDateChooser;
import java.awt.FileDialog;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.rowset.CachedRowSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import logica.DB;

/**
 *
 * @author Usuario
 */
public class InformePagos extends javax.swing.JInternalFrame {

    /**
     * Creates new form DetalleDineroRecibido
     */
    private DB db = new DB();
    logica.Utilidades utilidades = new logica.Utilidades();
    CierreCaja caja = new CierreCaja();

    public InformePagos() {
        initComponents();
        cargarTrimestre();
        
        Calendar fechaActual = new GregorianCalendar();
        deUno.setCalendar(fechaActual);
        aUno.setCalendar(fechaActual);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        rPagagosHoy = new javax.swing.JCheckBox();
        rPagosSumaDia = new javax.swing.JCheckBox();
        rPagosAyer = new javax.swing.JCheckBox();
        rSociosAlDia = new javax.swing.JCheckBox();
        rAdeudos = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        rPagosMes = new javax.swing.JCheckBox();
        deUno = new com.toedter.calendar.JDateChooser();
        aUno = new com.toedter.calendar.JDateChooser();
        rPagosSumaAno = new javax.swing.JCheckBox();
        rPagosTrimestre = new javax.swing.JCheckBox();
        rPagosEnOtrasFechas = new javax.swing.JCheckBox();
        mes = new com.toedter.calendar.JMonthChooser();
        ano = new com.toedter.calendar.JYearChooser();
        cboTrimestre = new javax.swing.JComboBox();
        anoMes = new com.toedter.calendar.JYearChooser();
        anoTrimestre = new com.toedter.calendar.JYearChooser();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Listado de Socios");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Listado de Pagos de los Socios ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setText("Permite visualizar el listado de los diferentes socios.");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/hoja.png"))); // NOI18N

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Exportar Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/excel.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(248, 248, 248)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel14))
                    .addComponent(jButton4))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla);

        buttonGroup1.add(rPagagosHoy);
        rPagagosHoy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rPagagosHoy.setText("Pagos Relizados Hoy");
        rPagagosHoy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPagagosHoyActionPerformed(evt);
            }
        });

        buttonGroup1.add(rPagosSumaDia);
        rPagosSumaDia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rPagosSumaDia.setText("Suma Total de Pagos de Socios por Día");
        rPagosSumaDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPagosSumaDiaActionPerformed(evt);
            }
        });

        buttonGroup1.add(rPagosAyer);
        rPagosAyer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rPagosAyer.setText("Pagos Realizados Ayer");
        rPagosAyer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPagosAyerActionPerformed(evt);
            }
        });

        buttonGroup1.add(rSociosAlDia);
        rSociosAlDia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rSociosAlDia.setText("Socios que estan al Día con sus Pagos");
        rSociosAlDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSociosAlDiaActionPerformed(evt);
            }
        });

        buttonGroup1.add(rAdeudos);
        rAdeudos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rAdeudos.setText("Socios con Adeudos");
        rAdeudos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rAdeudosActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("De:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("A:");

        buttonGroup1.add(rPagosMes);
        rPagosMes.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rPagosMes.setText("Suma Total de Pagos de Socios por Mes");
        rPagosMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPagosMesActionPerformed(evt);
            }
        });

        buttonGroup1.add(rPagosSumaAno);
        rPagosSumaAno.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rPagosSumaAno.setText("Suma Total de Pagos de Socios por Año");
        rPagosSumaAno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPagosSumaAnoActionPerformed(evt);
            }
        });

        buttonGroup1.add(rPagosTrimestre);
        rPagosTrimestre.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rPagosTrimestre.setText("Suma Total de pagos por  Trimestre");
        rPagosTrimestre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPagosTrimestreActionPerformed(evt);
            }
        });

        buttonGroup1.add(rPagosEnOtrasFechas);
        rPagosEnOtrasFechas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rPagosEnOtrasFechas.setText("Pagos Realizados en Otras Fechas");
        rPagosEnOtrasFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPagosEnOtrasFechasActionPerformed(evt);
            }
        });

        cboTrimestre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTrimestreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rPagagosHoy)
                                    .addComponent(rAdeudos))
                                .addGap(30, 30, 30))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(rPagosAyer)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rPagosSumaDia)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(deUno, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(aUno, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(rPagosEnOtrasFechas)))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rPagosSumaAno)
                                .addGap(18, 18, 18)
                                .addComponent(ano, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(rPagosMes)
                                        .addGap(18, 18, 18)
                                        .addComponent(mes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(anoMes, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(rPagosTrimestre)
                                        .addGap(50, 50, 50)
                                        .addComponent(cboTrimestre, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(rSociosAlDia))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(anoTrimestre, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1237, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rPagagosHoy)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rPagosSumaDia)
                                .addComponent(rPagosSumaAno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ano, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(rPagosEnOtrasFechas))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rPagosAyer)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rAdeudos)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(deUno, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(aUno, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mes, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(rPagosMes, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(anoMes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(rPagosTrimestre, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(anoTrimestre, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cboTrimestre, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addComponent(rSociosAlDia)))))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rPagagosHoyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPagagosHoyActionPerformed
        // TODO add your handling code here:
        pagosRealizadosHoy();
    }//GEN-LAST:event_rPagagosHoyActionPerformed

    private void rPagosSumaDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPagosSumaDiaActionPerformed
        // TODO add your handling code here:
        sumaPagosDia();
    }//GEN-LAST:event_rPagosSumaDiaActionPerformed

    private void rPagosMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPagosMesActionPerformed
        // TODO add your handling code here:
        sumaPagosMes();
    }//GEN-LAST:event_rPagosMesActionPerformed

    private void rPagosAyerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPagosAyerActionPerformed
        // TODO add your handling code here:
        pagosRealizadosAyer();
    }//GEN-LAST:event_rPagosAyerActionPerformed

    private void rSociosAlDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSociosAlDiaActionPerformed
        // TODO add your handling code here:
        sociosSinDeudas();
    }//GEN-LAST:event_rSociosAlDiaActionPerformed

    private void rAdeudosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rAdeudosActionPerformed
        // TODO add your handling code here:
        sociosConDeudas();
    }//GEN-LAST:event_rAdeudosActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (tabla.getColumnCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No hay datos para exportar", "Exportanto Datos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            GeneraExcel("Informe Socios");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void rPagosSumaAnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPagosSumaAnoActionPerformed
        // TODO add your handling code here:
        sumaPagosAno();
    }//GEN-LAST:event_rPagosSumaAnoActionPerformed

    private void rPagosTrimestreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPagosTrimestreActionPerformed
        // TODO add your handling code here:
        sumaPagosTrimestre();
    }//GEN-LAST:event_rPagosTrimestreActionPerformed

    private void rPagosEnOtrasFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPagosEnOtrasFechasActionPerformed
        // TODO add your handling code here:
        pagosRealizadosEnOtrasFechas();
    }//GEN-LAST:event_rPagosEnOtrasFechasActionPerformed

    private void cboTrimestreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTrimestreActionPerformed
   if(rPagosTrimestre.isSelected())
        sumaPagosTrimestre();        // TODO add your handling code here:
    }//GEN-LAST:event_cboTrimestreActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser aUno;
    private com.toedter.calendar.JYearChooser ano;
    private com.toedter.calendar.JYearChooser anoMes;
    private com.toedter.calendar.JYearChooser anoTrimestre;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cboTrimestre;
    private com.toedter.calendar.JDateChooser deUno;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JMonthChooser mes;
    private javax.swing.JCheckBox rAdeudos;
    private javax.swing.JCheckBox rPagagosHoy;
    private javax.swing.JCheckBox rPagosAyer;
    private javax.swing.JCheckBox rPagosEnOtrasFechas;
    private javax.swing.JCheckBox rPagosMes;
    private javax.swing.JCheckBox rPagosSumaAno;
    private javax.swing.JCheckBox rPagosSumaDia;
    private javax.swing.JCheckBox rPagosTrimestre;
    private javax.swing.JCheckBox rSociosAlDia;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    public void pagosRealizadosHoy() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"DESCRIPCIÓN", "VALOR", "TIPO DE PAGO", "FECHA REGISTRO"});
        try {
            String querySQL = "SELECT (so.primer_nombre || ' ' ||  so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS DESCRIPCION, REPLACE(CAST(sf.valor as text), '.0', ''), 'SALDO A FAVOR',sf.fecha_registro \n"
                    + "FROM saldofavor sf, caja ca, socio so, usuario_sistema us\n"
                    + "WHERE ca.fecha_apertura >= '" + obtnerFecha() + " 00:00:00.00' \n"
                    + "AND ca.fecha_cierre <= '" + obtnerFecha() + " 24:00:00.00' \n"
                    + "AND sf.caja_id=ca.id\n"
                    + "AND so.id=sf.socio_id\n"
                    + "AND sf.usuario_sistema_id= us.id\n"
                    + "UNION \n"
                    + "SELECT CONCAT(pago.nombres || ' ' || pago.apellidos) AS DESCRIPCION, REPLACE(CAST(pago.costo as text), '.0', ''), 'VISITA', pago.fecha_registro\n"
                    + "FROM pago_visita pago\n"
                    + "WHERE pago.fecha_registro BETWEEN '" + obtnerFecha() + " 00:00:00.00'  \n" + "AND '" + obtnerFecha() + " 24:00:00.00' \n"
                    + "UNION \n"
                    + "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS Descripcion, REPLACE(CAST(mem.pago as text), '.0', '') AS Costo, 'MEMBRESIA', mem.fecha_pago\n"
                    + "FROM pago_membresia mem, socio so\n"
                    + "WHERE so.id= mem.socio_id\n"
                    + "AND mem.saldo= 0.0"
                    + "AND mem.fecha_pago BETWEEN '" + obtnerFecha() + " 00:00:00.00' AND '" + obtnerFecha() + " 24:00:00.00'\n";
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            if (data.size() == 0) {
                JOptionPane.showMessageDialog(null, "No se encontro ningun pago realizado el día de hoy", "Mensaje de Información", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformePagos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void pagosRealizadosAyer() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"DESCRIPCIÓN", "VALOR", "TIPO DE PAGO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT (so.primer_nombre || ' ' ||  so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS DESCRIPCION, REPLACE(CAST(sf.valor as text), '.0', ''), 'SALDO A FAVOR',sf.fecha_registro \n"
                    + "FROM saldofavor sf, caja ca, socio so, usuario_sistema us\n"
                    + "WHERE ca.fecha_apertura >= '" + fechaAyer() + " 00:00:00.00' \n"
                    + "AND ca.fecha_cierre <= '" + fechaAyer() + " 24:00:00.00' \n"
                    + "AND sf.caja_id=ca.id\n"
                    + "AND so.id=sf.socio_id\n"
                    + "AND sf.usuario_sistema_id= us.id\n"
                    + "UNION \n"
                    + "SELECT CONCAT(pago.nombres || ' ' || pago.apellidos) AS DESCRIPCION, REPLACE(CAST(pago.costo as text), '.0', ''), 'VISITA', pago.fecha_registro\n"
                    + "FROM pago_visita pago\n"
                    + "WHERE pago.fecha_registro BETWEEN '" + fechaAyer() + " 00:00:00.00'  \n" + "AND '" + fechaAyer() + " 24:00:00.00' \n"
                    + "UNION \n"
                    + "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS Descripcion, REPLACE(CAST(mem.pago as text), '.0', '') AS Costo, 'MEMBRESIA', mem.fecha_pago\n"
                    + "FROM pago_membresia mem, socio so\n"
                    + "WHERE so.id= mem.socio_id\n"
                    + "AND mem.saldo= 0.0"
                    + "AND mem.fecha_pago BETWEEN '" + fechaAyer() + " 00:00:00.00' AND '" + fechaAyer() + " 24:00:00.00'\n";
            data = db.sqlDatos(querySQL);

            if (data.size() == 0) {
                JOptionPane.showMessageDialog(null, "No se encontro ningun pago", "Mensaje de Información", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformePagos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void pagosRealizadosEnOtrasFechas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"DESCRIPCIÓN", "VALOR", "TIPO DE PAGO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT (so.primer_nombre || ' ' ||  so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS DESCRIPCION, REPLACE(CAST(sf.valor as text), '.0', ''), 'SALDO A FAVOR',sf.fecha_registro \n"
                    + "FROM saldofavor sf, caja ca, socio so, usuario_sistema us\n"
                    + "WHERE ca.fecha_apertura >= '" + obtnerFechaDe() + " 00:00:00.00' \n"
                    + "AND ca.fecha_cierre <= '" + obtnerFechaA() + " 24:00:00.00' \n"
                    + "AND sf.caja_id=ca.id\n"
                    + "AND so.id=sf.socio_id\n"
                    + "AND sf.usuario_sistema_id= us.id\n"
                    + "UNION \n"
                    + "SELECT CONCAT(pago.nombres || ' ' || pago.apellidos) AS DESCRIPCION, REPLACE(CAST(pago.costo as text), '.0', ''), 'VISITA', pago.fecha_registro\n"
                    + "FROM pago_visita pago\n"
                    + "WHERE pago.fecha_registro BETWEEN '" + obtnerFechaDe() + " 00:00:00.00'  \n" + "AND '" + obtnerFechaA() + " 24:00:00.00' \n"
                    + "UNION \n"
                    + "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS Descripcion, REPLACE(CAST(mem.pago as text), '.0', '') AS Costo, 'MEMBRESIA', mem.fecha_pago\n"
                    + "FROM pago_membresia mem, socio so\n"
                    + "WHERE so.id= mem.socio_id\n"
                    + "AND mem.saldo= 0.0\n"
                    + "AND mem.fecha_pago BETWEEN '" + obtnerFechaDe() + " 00:00:00.00' AND '" + obtnerFechaA() + " 24:00:00.00'\n";

            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            if (data.size() == 0) {
                JOptionPane.showMessageDialog(null, "No se encontro ningun pago realizado en esta fecha especifica", "Mensaje de Información", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformePagos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sumaPagosDia() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"DESCRIPCIÓN", "VALOR", "TIPO DE PAGO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS Descripcion, REPLACE(CAST(SUM(mem.pago) as text), '.0', '') AS Costo, 'MEMBRESIA'\n"
                    + "FROM pago_membresia mem, socio so\n"
                    + "WHERE so.id= mem.socio_id\n"
                    + "AND mem.pago <> 0.0"
                    + "AND mem.fecha_pago BETWEEN '" + obtnerFecha() + " 00:00:00.00' AND '" + obtnerFecha() + " 24:00:00.00'\n"
                    + "GROUP BY so.primer_nombre, so.segundo_nombre, so.primer_apellido, so.segundo_apellido, mem.pago\n"
                    + "ORDER BY Descripcion ASC";
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            if (data.size() == 0) {
                JOptionPane.showMessageDialog(null, "No se encontro ningun pago de un socio el día de hoy", "Mensaje de Información", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformePagos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sumaPagosMes() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"DESCRIPCIÓN", "VALOR", "TIPO DE PAGO"});
        try {
            int mesSelccionado = mes.getMonth() + 1;
            int ano = anoMes.getYear();
            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS Descripcion, REPLACE(CAST(SUM(mem.pago) as text), '.0', '') AS Costo, 'MEMBRESIA'\n"
                    + "FROM pago_membresia mem, socio so\n"
                    + "WHERE so.id= mem.socio_id\n"
                    + "AND mem.pago <> 0.0\n"
                    + "AND extract(month from mem.fecha_pago)=".concat(String.valueOf(mesSelccionado)) + "\n"
                    + "AND extract(year from mem.fecha_pago)=".concat(String.valueOf(ano)) + "\n"
                    + "GROUP BY so.primer_nombre, so.segundo_nombre, so.primer_apellido, so.segundo_apellido\n"
                    + "ORDER BY Descripcion ASC";
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformePagos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sumaPagosAno() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"DESCRIPCIÓN", "VALOR", "TIPO DE PAGO", "FECHA PAGO"});
        try {
            int anoSelccionado = ano.getYear();
            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS Descripcion, REPLACE(CAST(SUM(mem.pago) as text), '.0', '') AS Costo, 'MEMBRESIA', mem.fecha_pago\n"
                    + "FROM pago_membresia mem, socio so\n"
                    + "WHERE so.id= mem.socio_id\n"
                    + "AND mem.pago <> 0.0\n"
                    + "AND extract(year from mem.fecha_pago)=".concat(String.valueOf(anoSelccionado)) + "\n"
                    + "GROUP BY so.primer_nombre, so.segundo_nombre, so.primer_apellido, so.segundo_apellido, mem.fecha_pago\n"
                    + "ORDER BY Descripcion ASC";

            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformePagos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sumaPagosTrimestre() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"DESCRIPCIÓN", "VALOR", "TIPO DE PAGO"});
        try {
            String trimestreSelccionado = obtenerTrimestre();
            int anio = anoTrimestre.getYear();
            String querySQL
                    = //                    "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS Descripcion, REPLACE(CAST(SUM(mem.pago) as text), '.0', '') AS Costo, 'MEMBRESIA'\n"
                    //                    + "FROM pago_membresia mem, socio so\n"
                    //                    + "WHERE so.id= mem.socio_id\n"
                    //                    + "AND mem.pago <> 0.0\n"
                    //                    + "AND extract(month from mem.fecha_pago) BETWEEN ".concat(obtenerTrimestre()) + "\n"
                    //                    + "AND extract(year from mem.fecha_pago)=".concat(String.valueOf(anio)) + "\n"
                    //                    + "GROUP BY so.primer_nombre, so.segundo_nombre, so.primer_apellido, so.segundo_apellido\n"
                    //                    + "ORDER BY Descripcion ASC";
                    "SELECT (so.primer_nombre || ' ' ||  so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS DESCRIPCION, REPLACE(CAST(sf.valor as text), '.0', ''), 'SALDO A FAVOR',sf.fecha_registro \n"
                    + "FROM saldofavor sf, caja ca, socio so, usuario_sistema us\n"
                    + "WHERE sf.caja_id=ca.id\n"
                    + "AND extract(month from ca.fecha_apertura) BETWEEN ".concat(obtenerTrimestre()) + "\n"
                    + "AND extract(year from ca.fecha_apertura)=".concat(String.valueOf(anio)) + "\n"
                    + "AND so.id=sf.socio_id\n"
                    + "AND sf.usuario_sistema_id= us.id\n"
                    + "UNION \n"
                    + "SELECT CONCAT(pago.nombres || ' ' || pago.apellidos) AS DESCRIPCION, REPLACE(CAST(pago.costo as text), '.0', ''), 'VISITA', pago.fecha_registro\n"
                    + "FROM pago_visita pago\n"
                    + "WHERE extract(month from pago.fecha_registro) BETWEEN ".concat(obtenerTrimestre()) + "\n"
                    + "AND extract(year from pago.fecha_registro)=".concat(String.valueOf(anio)) + "\n"
                    + "UNION \n"
                    + "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre || ' ' || so.primer_apellido || ' ' || so.segundo_apellido) AS Descripcion, REPLACE(CAST(mem.pago as text), '.0', '') AS Costo, 'MEMBRESIA', mem.fecha_pago\n"
                    + "FROM pago_membresia mem, socio so\n"
                    + "WHERE so.id= mem.socio_id\n"
                    + "AND mem.saldo= 0.0"
                    + "AND extract(month from mem.fecha_pago) BETWEEN ".concat(obtenerTrimestre()) + "\n"
                    + "AND extract(year from mem.fecha_pago)=".concat(String.valueOf(anio)) + "\n";

            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformePagos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosSinDeudas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "SALDO", "MEMBRESIA", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Descripcion, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido), REPLACE(CAST(mem.saldo as text), '.0', '') AS Saldo, 'Membresia', mem.fecha_pago\n"
                    + "FROM pago_membresia mem, socio so\n"
                    + "WHERE mem.saldo <= 0.0\n"
                    + "AND mem.pago > 0.0\n"
                    + "AND so.id= mem.socio_id";
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformePagos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosConDeudas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "MEMBRESIA", "SEXO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Descripcion, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido), REPLACE(CAST(mem.saldo as text), '.0', '') AS Saldo, 'Membresia', mem.fecha_pago\n"
                    + "FROM pago_membresia mem, socio so\n"
                    + "WHERE mem.saldo > 0.0\n"
                    + "AND mem.pago > 0.0\n"
                    + "AND so.id = mem.socio_id\n"
                    + "ORDER BY primer_apellido ASC";
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformePagos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void cargarTrimestre() {
        cboTrimestre.addItem("PRIMER TRIMESTRE");
        cboTrimestre.addItem("SEGUNDO TRIMESTRE");
        cboTrimestre.addItem("TERCER TRIMESTRE");
        cboTrimestre.addItem("CUARTO TRIMESTRE");
    }

    public String obtenerTrimestre() {
        String semestre = null;
        if (cboTrimestre.getSelectedItem() == "PRIMER TRIMESTRE") {
            semestre = "1 AND 3";
        } else if (cboTrimestre.getSelectedItem() == "SEGUNDO TRIMESTRE") {
            semestre = "4 AND 6";
        } else if (cboTrimestre.getSelectedItem() == "TERCER TRIMESTRE") {
            semestre = "7 AND 9";
        } else if (cboTrimestre.getSelectedItem() == "CUARTO TRIMESTRE") {
            semestre = "10 AND 12";
        }
        return semestre;
    }

    public String obtnerFechaActual() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH));
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));
        String hora = String.valueOf(fechaActual.get(Calendar.HOUR));
        String minutos = String.valueOf(fechaActual.get(Calendar.MINUTE));
        String segundos = String.valueOf(fechaActual.get(Calendar.SECOND));
        String mili = String.valueOf(fechaActual.get(Calendar.MILLISECOND));
        String fecha = anoo + "-" + mess + "-" + diaa + "  " + hora + "" + minutos + "" + segundos + "" + mili;
        return fecha;
    }

    public String fechaAyer() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH) - 1);
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));

        String fecha = anoo + "-" + mess + "-" + diaa;
        return fecha;
    }

    public String obtnerFechaDe() {
        Calendar fech = deUno.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = deUno.getCalendar().get(Calendar.YEAR);
        int mes = deUno.getCalendar().get(Calendar.MONTH) + 1;
        int dia = deUno.getCalendar().get(Calendar.DAY_OF_MONTH);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        System.out.println("La fecha es: " + fecha);
        return fecha;
    }

    public String obtnerFechaA() {
        Calendar fech = aUno.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = aUno.getCalendar().get(Calendar.YEAR);
        int mes = aUno.getCalendar().get(Calendar.MONTH) + 1;
        int dia = aUno.getCalendar().get(Calendar.DAY_OF_MONTH);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        return fecha;
    }

    public String obtnerFecha() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH));
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));

        String fecha = anoo + "-" + mess + "-" + diaa;
        return fecha;
    }

    public String comboSeleccionado() {
        String nombreArchivo = null;
        if (rAdeudos.isSelected()) {
            nombreArchivo = "Informe_Socios_Con_Adeudos";
        } else if (rPagagosHoy.isSelected()) {
            nombreArchivo = "Informe_Pagos_Realizados_Hoy";
        } else if (rPagosAyer.isSelected()) {
            nombreArchivo = "Informe_Pagos_Realizados_Ayer";
        } else if (rPagosMes.isSelected()) {
            nombreArchivo = "Informe_Pagos_Socios_Mes";
        } else if (rPagosSumaDia.isSelected()) {
            nombreArchivo = "Informe_Pagos_Socios_Dia";
        } else if (rPagosSumaAno.isSelected()) {
            nombreArchivo = "Informe_Pagos_Socios_Año";
        } else if (rPagosTrimestre.isSelected()) {
            nombreArchivo = "Informe_Pagos_Socios_Trimestre";
        } else if (rPagosEnOtrasFechas.isSelected()) {
            nombreArchivo = "Informe_Pagos_Realizados_En_Otras_Fechas";
        }
        return nombreArchivo;
    }

    public void GeneraExcel(String informe) {
        if (tabla.getRowCount() > 0) {
            String nombre;
            FileDialog d;
            d = new FileDialog((Frame) null, "Guardar Archivo Hercules", FileDialog.SAVE);

            d.setFile(comboSeleccionado().concat(" ").concat(obtnerFechaActual()));
            d.setLocation(100, 100);
            d.setVisible(true);
            //getDirectory te permite guardar en la ubicacion que se desea
            nombre = d.getDirectory() + d.getFile();
            if (nombre != null) {
                List<JTable> tb = new ArrayList<JTable>();
                List<String> nom = new ArrayList<String>();
                tb.add(tabla);
                nom.add(informe);
                String file = nombre.concat(".xls");

                String filename = d.getFile();
                try {
                    Exporter e = new Exporter(new File(file), tb, nom);
                    if (filename != null) {
                        if (e.export()) {
                            JOptionPane.showMessageDialog(null, "Los datos fueron exportados a excel con exito", "Mensaje de Información", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ha cancelado la importacion de los datos", "Mensaje de Información", JOptionPane.CANCEL_OPTION);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se exportaron los datos" + e.getMessage(), " Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay datos en la tabla para exportar", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
