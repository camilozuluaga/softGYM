/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desarrollo;

import java.io.IOException;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.rowset.CachedRowSet;
import javax.swing.JLabel;
import logica.DB;
import logica.Utilidades;
import net.sf.jcarrierpigeon.WindowPosition;
import net.sf.jtelegraph.Telegraph;
import net.sf.jtelegraph.TelegraphQueue;
import net.sf.jtelegraph.TelegraphType;
import puerta.Puerta;

/**
 *
 * @author coder
 */
public class AdministrarPuerta extends javax.swing.JInternalFrame {

    boolean tipoPuertaParametrizada;
    boolean tiempoGraciaParametrizado;
    private final DB db = new DB();
    Utilidades util;
    String result = "";
    Puerta arduino;
    Frame frame;

    /**
     * Creates new form AdministrarPuerta
     *
     * @throws java.sql.SQLException
     */
    public AdministrarPuerta(Puerta pp, Frame ventana) throws SQLException, IOException {
        initComponents();
        ocultarPuerto();
        if (cargarCantonera()) {
            mostrarPuerto();
        }
        tipoPuertaParametrizada = false;
        tiempoGraciaParametrizado = false;
        getInfo("tiempogracia_puerta", lblErrorMessage2, "txt", tiempoGraciaParametrizado);
        getInfo("unidad_tiempogracia_puerta", lblErrorMessage2, "combo", tiempoGraciaParametrizado);
        cargarTipoPuertaActual();
        util = new Utilidades();
        arduino = pp;
        arduino.cargarPuertos(cboPuerto);
        frame = ventana;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGuardar = new javax.swing.JButton();
        grupoTiposPuerta = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        puertaCantonera = new javax.swing.JRadioButton();
        puertaTorniquete = new javax.swing.JRadioButton();
        btnGuardar1 = new javax.swing.JButton();
        lblErrorMessage = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cboTiempoGracia = new javax.swing.JComboBox();
        txtValorTiempoGracia = new javax.swing.JTextField();
        lblErrorMessage2 = new javax.swing.JLabel();
        lblPuerto = new javax.swing.JLabel();
        cboPuerto = new javax.swing.JComboBox();
        btnConectar = new javax.swing.JButton();

        btnGuardar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        setClosable(true);
        setIconifiable(true);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Administrar Puerta");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/puerta.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setText("Permite administrar el tipo de puerta.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 401, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(130, 130, 130))
        );

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setText("Seleccion el tipo de puerta:");

        grupoTiposPuerta.add(puertaCantonera);
        puertaCantonera.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        puertaCantonera.setText("Puerta con cantonera eléctrica");
        puertaCantonera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puertaCantoneraActionPerformed(evt);
            }
        });
        puertaCantonera.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                puertaCantoneraKeyPressed(evt);
            }
        });

        grupoTiposPuerta.add(puertaTorniquete);
        puertaTorniquete.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        puertaTorniquete.setText("Puerta con torniquete eléctrico");
        puertaTorniquete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puertaTorniqueteActionPerformed(evt);
            }
        });
        puertaTorniquete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                puertaTorniqueteKeyPressed(evt);
            }
        });

        btnGuardar1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnGuardar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/guardar.png"))); // NOI18N
        btnGuardar1.setText("Guardar");
        btnGuardar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardar1ActionPerformed(evt);
            }
        });

        lblErrorMessage.setForeground(new java.awt.Color(255, 0, 0));

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setText("Tiempo de gracia:");
        jLabel5.setToolTipText("<html><p>Tiempo que puede ocupar un socio para <b>volver <br>a entrar o volver a salir</b> del gimnasio.</p></htm>");

        cboTiempoGracia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Seleccione--", "Minutos", "Horas" }));

        txtValorTiempoGracia.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        lblErrorMessage2.setForeground(new java.awt.Color(255, 0, 0));

        lblPuerto.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblPuerto.setText("Puerto");

        cboPuerto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar" }));

        btnConectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/buscar.png"))); // NOI18N
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(puertaCantonera))
                            .addComponent(lblErrorMessage2, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(puertaTorniquete))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cboPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtValorTiempoGracia, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnGuardar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboTiempoGracia, 0, 136, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblErrorMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(puertaCantonera)
                    .addComponent(puertaTorniquete))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cboPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtValorTiempoGracia, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(cboTiempoGracia, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(btnGuardar1)
                .addGap(18, 18, 18)
                .addComponent(lblErrorMessage2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void puertaCantoneraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puertaCantoneraActionPerformed
        // TODO add your handling code here:
        mostrarPuerto();
    }//GEN-LAST:event_puertaCantoneraActionPerformed

    private void puertaTorniqueteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puertaTorniqueteActionPerformed
        // TODO add your handling code here:
        ocultarPuerto();
    }//GEN-LAST:event_puertaTorniqueteActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGuardar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardar1ActionPerformed
        try {

            if (!cboPuerto.getSelectedItem().equals("Seleccionar")) {
                String sentencia = String.format("UPDATE puerto SET port='%s';", cboPuerto.getSelectedItem());
                db.sqlEjec(sentencia);
            }
            setTipoPuerta();
            setTiempoGracia();
            if (tiempoGraciaParametrizado && tipoPuertaParametrizada) {
                Telegraph tele = new Telegraph("Configuración Puerta", "Información actualizada exitosamente.", TelegraphType.NOTIFICATION_DONE, WindowPosition.TOPRIGHT, 7000);
                TelegraphQueue q = new TelegraphQueue();
                q.add(tele);

                loginReinicio inicio = new loginReinicio();
                inicio.setVisible(true);
                frame.dispose();
            }
        } catch (IOException ex) {
            Logger.getLogger(AdministrarPuerta.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardar1ActionPerformed

    private void puertaCantoneraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_puertaCantoneraKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            guardar();
        }
    }//GEN-LAST:event_puertaCantoneraKeyPressed

    private void puertaTorniqueteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_puertaTorniqueteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            guardar();
        }
    }//GEN-LAST:event_puertaTorniqueteKeyPressed

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        // TODO add your handling code here:
        arduino.configuararPuerto(String.valueOf(cboPuerto.getSelectedItem()), this);
    }//GEN-LAST:event_btnConectarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardar1;
    private javax.swing.JComboBox cboPuerto;
    private javax.swing.JComboBox cboTiempoGracia;
    private javax.swing.ButtonGroup grupoTiposPuerta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblErrorMessage;
    private javax.swing.JLabel lblErrorMessage2;
    private javax.swing.JLabel lblPuerto;
    private javax.swing.JRadioButton puertaCantonera;
    private javax.swing.JRadioButton puertaTorniquete;
    private javax.swing.JTextField txtValorTiempoGracia;
    // End of variables declaration//GEN-END:variables

    public void mostrarPuerto() {
        cboPuerto.setVisible(true);
        btnConectar.setVisible(true);
        lblPuerto.setVisible(true);
    }

    public void ocultarPuerto() {
        cboPuerto.setVisible(false);
        btnConectar.setVisible(false);
        lblPuerto.setVisible(false);
    }

    private void guardar() {
        tipoPuertaParametrizada = true; // boolean que dice si la puerta ha sido parametrizada o no.
        String tipoPuerta = ""; // cantonera/torniquete
        boolean success; // consulta a bd exitosa

        if (util.getSelectedButtonText(grupoTiposPuerta).equals("Puerta con cantonera eléctrica")) {
            tipoPuerta = "cantonera";

        } else if (util.getSelectedButtonText(grupoTiposPuerta).equals("Puerta con torniquete eléctrico")) {
            tipoPuerta = "torniquete";
        }

        if (tipoPuertaParametrizada) {
            String sql = String.format("UPDATE empresa SET tipo_puerta='%s';", tipoPuerta);
            success = db.sqlEjec(sql);
        } else {
            String sql = String.format("INSERT INTO empresa(tipo_puerta) VALUES tipo_puerta='%s';", tipoPuerta);
            success = db.sqlEjec(sql);
        }

        notificaciones(success);
    }

    private void notificaciones(boolean success) {
        if (success) {
            Telegraph tele = new Telegraph("Tipo de puerta registrado", "Se ha registrado correctamente el tipo de puerta.", TelegraphType.NOTIFICATION_DONE, WindowPosition.TOPRIGHT, 4000);
            TelegraphQueue q = new TelegraphQueue();
            q.add(tele);
            lblErrorMessage.setText("");
        } else {
            Telegraph tele = new Telegraph("Tipo de puerta no registrado", "No se ha registrado el tipo de puerta.", TelegraphType.NOTIFICATION_ERROR, WindowPosition.TOPRIGHT, 4000);
            TelegraphQueue q = new TelegraphQueue();
            q.add(tele);
        }

    }

    private void cargarTipoPuertaActual() throws SQLException {
        CachedRowSet data;
        data = db.sqlDatos("SELECT tipo_puerta FROM empresa;");
        String tipoPuerta = "";

        while (data.next()) {
            tipoPuerta = data.getString("tipo_puerta");
        }
        if (tipoPuerta == null) {
            tipoPuertaParametrizada = false;
            lblErrorMessage.setText("No ha sido parametrizado el tipo de puerta.");
            return;
        }
        tipoPuertaParametrizada = true;
        switch (tipoPuerta) {
            case "cantonera":
                puertaCantonera.setSelected(true);
                break;
            case "torniquete":
                puertaTorniquete.setSelected(true);
                break;
        }

    }

    private void getInfo(String nombreCampo, JLabel labelError, String tipoCampo, boolean campoParametrizado) throws IOException, SQLException {
        CachedRowSet data;
        String sql = String.format("SELECT %s FROM empresa", nombreCampo);
        data = db.sqlDatos(sql);
        String tiempoGracia = "";

        while (data.next()) {
            tiempoGracia = data.getString(nombreCampo);
        }
        if (tiempoGracia == null) {
            campoParametrizado = false;
            labelError.setText("No ha sido parametrizado el tiempo de gracia.");
            return;
        }
        campoParametrizado = true;
        if (tipoCampo.equals("txt")) {
            txtValorTiempoGracia.setText(String.valueOf(tiempoGracia));
        } else {
            cboTiempoGracia.setSelectedItem(tiempoGracia);
        }
    }

    private boolean setTiempoGracia() throws IOException {
        boolean consulta1exitosa;
        boolean consulta2exitosa;

        if (!txtValorTiempoGracia.getText().equals("") && !cboTiempoGracia.getSelectedItem().equals("--Seleccione--")) {
            //se obtienen los campos de la interfaz
            String unidad = cboTiempoGracia.getSelectedItem().toString();
            String tiempo = txtValorTiempoGracia.getText();

            //elaboramos las consultas para actualizar los valores en db
            String sql = String.format("UPDATE empresa SET tiempogracia_puerta='%s';", tiempo);
            String sql1 = String.format("UPDATE empresa SET unidad_tiempogracia_puerta='%s';", unidad);
            //ejecutamos las consultas 
            consulta1exitosa = db.sqlEjec(sql);
            consulta2exitosa = db.sqlEjec(sql1);
            //comprobamos si se ejecutaron satisfactoriamente
            if (consulta1exitosa && consulta2exitosa) {
                if (!tiempoGraciaParametrizado) {
                    Telegraph tele = new Telegraph("Tiempo Gracia Mensaje", "Tiempo gracia fue configurado exitosamente para la puerta.", TelegraphType.NOTIFICATION_DONE, WindowPosition.TOPRIGHT, 7000);
                    TelegraphQueue q = new TelegraphQueue();
                    q.add(tele);
                    tiempoGraciaParametrizado = true;
                    lblErrorMessage2.setText("");
                }
                return true;
            } else {
                Telegraph tele = new Telegraph("Tiempo Gracia Mensaje", "No se ha podido configurar el tiempo de gracia\nContacte a soporte para más información.", TelegraphType.NOTIFICATION_ERROR, WindowPosition.TOPRIGHT, 7000);
                TelegraphQueue q = new TelegraphQueue();
                q.add(tele);
                return false;
            }
        }
        return false;
    }

    private boolean setTipoPuerta() {
        String tipoPuerta = ""; // cantonera/torniquete
        boolean success; // consulta a bd exitosa

        if (grupoTiposPuerta.getSelection() != null) { // si no se seleccionó un tipo de puerta no hacemos nada.
            if (util.getSelectedButtonText(grupoTiposPuerta).equals("Puerta con cantonera eléctrica")) {
                tipoPuerta = "cantonera";
            } else if (util.getSelectedButtonText(grupoTiposPuerta).equals("Puerta con torniquete eléctrico")) {
                tipoPuerta = "torniquete";
            }

            String sql = String.format("UPDATE empresa SET tipo_puerta='%s';", tipoPuerta);
            success = db.sqlEjec(sql);
            if (success) {
                if (!tipoPuertaParametrizada) {
                    notificaciones(success);
                }
            }

            return true;
        }
        return false;
    }

    public boolean cargarCantonera() {
        CachedRowSet data;
        String tipoPuerta = "";
        String querySQL = "SELECT tipo_puerta FROM empresa";
        data = db.sqlDatos(querySQL);

        try {
            if (data.next()) {
                tipoPuerta = data.getString("tipo_puerta");

                System.out.println("El puerto cargado de la bd es: " + tipoPuerta);
            }
        } catch (SQLException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
            //mensaje("Dispositivo de control", "No se ha podido configurar el dispositivo bluetooth para el control de la puerta, verifique que este conectado \n Asegurese de configurar la cantonera", TelegraphType.NOTIFICATION_WARNING, 2500);

        }
        boolean valor = false;
        if (tipoPuerta.equals("cantonera")) {
            valor = true;
        }

        return valor;
    }

}
