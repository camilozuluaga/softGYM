/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desarrollo;

import com.toedter.calendar.JDateChooser;
import java.awt.FileDialog;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.rowset.CachedRowSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import logica.DB;

/**
 *
 * @author Usuario
 */
public class InformeAsistencia extends javax.swing.JInternalFrame {

    /**
     * Creates new form DetalleDineroRecibido
     */
    private DB db = new DB();
    logica.Utilidades utilidades = new logica.Utilidades();
    CierreCaja caja = new CierreCaja();

    public InformeAsistencia() {
        initComponents();
        cargarDia();
         Calendar fechaActual = new GregorianCalendar();
        deUno.setCalendar(fechaActual);
        aUno.setCalendar(fechaActual);
        deDos.setCalendar(fechaActual);
        aDos.setCalendar(fechaActual);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblTipoInforme = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        rIngresaronHoy = new javax.swing.JCheckBox();
        rIngresaronAyer = new javax.swing.JCheckBox();
        rVisitasHoy = new javax.swing.JCheckBox();
        deUno = new com.toedter.calendar.JDateChooser();
        aUno = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        deDos = new com.toedter.calendar.JDateChooser();
        aDos = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        rIngresaronOtrasFechas = new javax.swing.JCheckBox();
        rVisitasOtrosDias = new javax.swing.JCheckBox();
        rSociosAusentesDia = new javax.swing.JCheckBox();
        cboDia = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        lblSuma = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Listado de Asistencia");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Listado de Asistencia ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setText("Permite visualizar la asistencia de los socios. ");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/hoja.png"))); // NOI18N

        lblTipoInforme.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Exportar Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/excel.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTipoInforme, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4)
                    .addComponent(jLabel14))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTipoInforme, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabla.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla);

        buttonGroup1.add(rIngresaronHoy);
        rIngresaronHoy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rIngresaronHoy.setText("Socios que Ingresaron Hoy");
        rIngresaronHoy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rIngresaronHoyActionPerformed(evt);
            }
        });

        buttonGroup1.add(rIngresaronAyer);
        rIngresaronAyer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rIngresaronAyer.setText("Socios que Ingresaron Ayer");
        rIngresaronAyer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rIngresaronAyerActionPerformed(evt);
            }
        });

        buttonGroup1.add(rVisitasHoy);
        rVisitasHoy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rVisitasHoy.setText("Listado de Visitas del DÃ­a de Hoy");
        rVisitasHoy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rVisitasHoyActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("De:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("A:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("De:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("A:");

        buttonGroup1.add(rIngresaronOtrasFechas);
        rIngresaronOtrasFechas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rIngresaronOtrasFechas.setText("Socios que Ingresaron en Otras Fechas");
        rIngresaronOtrasFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rIngresaronOtrasFechasActionPerformed(evt);
            }
        });

        buttonGroup1.add(rVisitasOtrosDias);
        rVisitasOtrosDias.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rVisitasOtrosDias.setText("Visitas en Otras Fechas");
        rVisitasOtrosDias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rVisitasOtrosDiasActionPerformed(evt);
            }
        });

        buttonGroup1.add(rSociosAusentesDia);
        rSociosAusentesDia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rSociosAusentesDia.setText("Socios activos ausentes en x dia ");
        rSociosAusentesDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSociosAusentesDiaActionPerformed(evt);
            }
        });

        cboDia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDiaActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("DIAS");

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox1.setText("Todas las visitas (Suma)");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        lblSuma.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        lblSuma.setForeground(new java.awt.Color(0, 204, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(rIngresaronOtrasFechas)
                            .addGap(18, 18, 18)
                            .addComponent(rVisitasOtrosDias))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(10, 10, 10)
                                    .addComponent(deUno, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18)
                                    .addComponent(aUno, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(10, 10, 10)
                                    .addComponent(deDos, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(18, 18, 18)
                                    .addComponent(aDos, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(rIngresaronHoy))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(361, 361, 361)
                        .addComponent(rIngresaronAyer)))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rVisitasHoy)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSuma, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rSociosAusentesDia)
                        .addGap(6, 6, 6)
                        .addComponent(cboDia, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6)))
                .addGap(9, 10, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rIngresaronHoy)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rVisitasHoy, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rIngresaronAyer)))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rIngresaronOtrasFechas)
                            .addComponent(rVisitasOtrosDias)
                            .addComponent(rSociosAusentesDia))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jCheckBox1)
                                        .addComponent(lblSuma, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(jLabel8))
                                            .addComponent(deDos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(4, 4, 4)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(aDos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(26, 26, 26))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(deUno, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(aUno, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel6)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rIngresaronHoyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rIngresaronHoyActionPerformed
        // TODO add your handling code here:
        sociosIngresaronHoy();
    }//GEN-LAST:event_rIngresaronHoyActionPerformed

    private void rIngresaronAyerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rIngresaronAyerActionPerformed
        // TODO add your handling code here:
        sociosIngresaronAyer();
    }//GEN-LAST:event_rIngresaronAyerActionPerformed

    private void rVisitasHoyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rVisitasHoyActionPerformed
        // TODO add your handling code here:
        sociosVisita();
    }//GEN-LAST:event_rVisitasHoyActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (tabla.getColumnCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No hay datos para exportar", "Exportanto Datos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            GeneraExcel("Informe Socios");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void rIngresaronOtrasFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rIngresaronOtrasFechasActionPerformed
        // TODO add your handling code here:
        sociosFechasEspecificas();
    }//GEN-LAST:event_rIngresaronOtrasFechasActionPerformed

    private void rVisitasOtrosDiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rVisitasOtrosDiasActionPerformed
        // TODO add your handling code here:
        visitasFechasEspecificas();
    }//GEN-LAST:event_rVisitasOtrosDiasActionPerformed

    private void rSociosAusentesDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSociosAusentesDiaActionPerformed
        // TODO add your handling code here:
        sociosAusentesDias();
    }//GEN-LAST:event_rSociosAusentesDiaActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        todasLasVisitas();
        sumaVisitas();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void cboDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDiaActionPerformed
if(rSociosAusentesDia.isSelected()){
  sociosAusentesDias();
}
    }//GEN-LAST:event_cboDiaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser aDos;
    private com.toedter.calendar.JDateChooser aUno;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cboDia;
    private com.toedter.calendar.JDateChooser deDos;
    private com.toedter.calendar.JDateChooser deUno;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSuma;
    private javax.swing.JLabel lblTipoInforme;
    private javax.swing.JCheckBox rIngresaronAyer;
    private javax.swing.JCheckBox rIngresaronHoy;
    private javax.swing.JCheckBox rIngresaronOtrasFechas;
    private javax.swing.JCheckBox rSociosAusentesDia;
    private javax.swing.JCheckBox rVisitasHoy;
    private javax.swing.JCheckBox rVisitasOtrosDias;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    public void sociosIngresaronHoy() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIOS", "APELLIDO SOCIO", "FECHA DE INGRESO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, en.fecha_hora\n"
                    + "FROM entrada_socio en, socio so\n"
                    + "WHERE en.socio_id= so.id\n"
                    + "AND en.fecha_registro >= '".concat(obtnerFecha()).concat("' AND en.fecha_registro <= '").concat(obtnerFecha()).concat("'");
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se encontro ningun socio el dia de hoy", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeAsistencia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosIngresaronAyer() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "FECHA DE INGRESO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, en.fecha_hora\n"
                    + "FROM entrada_socio en, socio so\n"
                    + "WHERE en.socio_id= so.id\n"
                    + "AND en.fecha_registro BETWEEN '".concat(fechaAyer()).concat(" 00:00:00.00' AND '").concat(fechaAyer()).concat(" 24:00:00.00'");
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se encontro ningun socio", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeAsistencia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosVisita() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "COSTO", "FECHA DE INGRESO"});
        try {

            String querySQL = "SELECT nombres, apellidos, REPLACE(CAST(costo as text), '.0', ''), fecha_registro\n"
                    + "FROM pago_visita\n"
                    + "WHERE "
                    + "fecha_registro >= '".concat(obtnerFecha()).concat(" 00:00:00.00' AND fecha_registro <= '").concat(obtnerFecha()).concat(" 24:00:00.00'");
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se encontro ninguna visita el dÃ­a de hoy", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeAsistencia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosFechasEspecificas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "SEXO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, so.sexo AS Sexo, en.fecha_registro AS FechaRegistro\n"
                    + "FROM entrada_socio en, socio so\n"
                    + "WHERE en.socio_id= so.id\n"
                    + "AND en.fecha_registro BETWEEN '".concat(String.valueOf(obtnerFechaDe())).concat(" 00:00:00.00' AND '").concat(String.valueOf(obtnerFechaA())).concat(" 24:00:00.00'");
            System.out.println("La consulta es:" + querySQL);
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se encontro ningun socio en esta fecha especifica", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosAusentesDias() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "ESTADO", "SEXO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, en.fecha_registro,CURRENT_DATE,CURRENT_DATE+1\n"
                    + "FROM entrada_socio en, socio so\n"
                    + "WHERE so.id= en.socio_id\n"
                    + "AND en.fecha_registro BETWEEN CURRENT_DATE-".concat(String.valueOf(obtenerDia())).concat(" AND CURRENT_DATE");
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se encontro ningun socio ausente", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void visitasFechasEspecificas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "COSTO", "FECHA DE INGRESO"});
        try {

            String querySQL = "SELECT nombres, apellidos, REPLACE(CAST(costo as text), '.0', ''), fecha_registro\n"
                    + "FROM pago_visita\n"
                    + "WHERE \n"
                    + "fecha_registro BETWEEN '".concat(String.valueOf(obtnerFechaDosDe())).concat(" 00:00:00.00' AND '").concat(String.valueOf(obtnerFechaDosA())).concat(" 24:00:00.00'");
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se encontro ninguna visita en esta fecha especifica", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public int obtenerDia() {
        int dia = (int) cboDia.getSelectedItem();
        return dia;
    }

    public void cargarDia() {
        for (int i = 1; i < 32; i++) {
            cboDia.addItem(i);
        }
    }

    public String obtnerFechaActual() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH));
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));
        String hora = String.valueOf(fechaActual.get(Calendar.HOUR));
        String minutos = String.valueOf(fechaActual.get(Calendar.MINUTE));
        String segundos = String.valueOf(fechaActual.get(Calendar.SECOND));
        String mili = String.valueOf(fechaActual.get(Calendar.MILLISECOND));
        String fecha = anoo + "-" + mess + "-" + diaa + "  " + hora + "" + minutos + "" + segundos + "" + mili;
        return fecha;
    }

    public String obtnerFecha() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH));
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));

        String fecha = anoo + "-" + mess + "-" + diaa;
        return fecha;
    }

    public String fechaAyer() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH) - 1);
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));

        String fecha = anoo + "-" + mess + "-" + diaa;
        return fecha;
    }

    public String obtnerFechaDe() {
        Calendar fech = deUno.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = deUno.getCalendar().get(Calendar.YEAR);
        int mes = deUno.getCalendar().get(Calendar.MONTH) + 1;
        int dia = deUno.getCalendar().get(Calendar.DAY_OF_MONTH);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        System.out.println("La fecha es: " + fecha);
        return fecha;
    }

    public String obtnerFechaA() {
        Calendar fech = aUno.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = aUno.getCalendar().get(Calendar.YEAR);
        int mes = aUno.getCalendar().get(Calendar.MONTH) + 1;
        int dia = aUno.getCalendar().get(Calendar.DAY_OF_MONTH);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        return fecha;
    }

    public String obtnerFechaDosDe() {
        Calendar fech = deDos.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = deDos.getCalendar().get(Calendar.YEAR);
        int mes = deDos.getCalendar().get(Calendar.MONTH) + 1;
        int dia = deDos.getCalendar().get(Calendar.DAY_OF_MONTH);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        System.out.println("La fecha es: " + fecha);
        return fecha;
    }

    public String obtnerFechaDosA() {
        Calendar fech = deDos.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = aDos.getCalendar().get(Calendar.YEAR);
        int mes = aDos.getCalendar().get(Calendar.MONTH) + 1;
        int dia = aDos.getCalendar().get(Calendar.DAY_OF_MONTH);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        return fecha;
    }

    public String comboSeleccionado() {
        String nombreArchivo = null;
        if (rIngresaronHoy.isSelected()) {
            nombreArchivo = "Informe_Socios_Que_Ingresaron_Hoy";
        } else if (rIngresaronAyer.isSelected()) {
            nombreArchivo = "Informe_Socios_Que_Ingresaron_Ayer";
        } else if (rVisitasHoy.isSelected()) {
            nombreArchivo = "Informe_Visitas_Hoy";
        } else if (rIngresaronOtrasFechas.isSelected()) {
            nombreArchivo = "Informe_Socios_Que_Ingresaron_En_Otras_Fechas";
        } else if (rSociosAusentesDia.isSelected()) {
            nombreArchivo = "Informe_Socios_Ausentes";
        } else if (rVisitasOtrosDias.isSelected()) {
            nombreArchivo = "Informe_Visitas_En_Otras_Fechas";
        }
        return nombreArchivo;
    }

    public void GeneraExcel(String informe) {
        if (tabla.getRowCount() > 0) {
            String nombre;
            FileDialog d;
            d = new FileDialog((Frame) null, "Guardar Archivo Hercules", FileDialog.SAVE);

            d.setFile(comboSeleccionado().concat(" ").concat(obtnerFechaActual()));
            d.setLocation(100, 100);
            d.setVisible(true);
            //getDirectory te permite guardar en la ubicacion que se desea
            nombre = d.getDirectory() + d.getFile();
            if (nombre != null) {
                List<JTable> tb = new ArrayList<JTable>();
                List<String> nom = new ArrayList<String>();
                tb.add(tabla);
                nom.add(informe);
                String file = nombre.concat(".xls");

                String filename = d.getFile();
                System.out.println("La ruta es: ----------------------------------------------------------" + filename);
                try {
                    Exporter e = new Exporter(new File(file), tb, nom);
                    if (filename != null) {
                        if (e.export()) {
                            JOptionPane.showMessageDialog(null, "Los datos fueron exportados a excel con exito", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ha cancelado la importacion de los datos", "Mensaje de InformaciÃ³n", JOptionPane.CANCEL_OPTION);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se exportaron los datos" + e.getMessage(), " Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay datos en la tabla para exportar", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
        public void todasLasVisitas() {

        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "COSTO", "FECHA DE INGRESO"});
       try {

          String querySQL = "SELECT nombres, apellidos, REPLACE(CAST(costo as text), '.0', ''), fecha_registro\n"
                   + "FROM pago_visita ORDER BY id DESC\n";
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
           Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
      }
   }

   public void sumaVisitas() {
       CachedRowSet data;
        int suma = 0;
       DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "COSTO", "FECHA DE INGRESO"});
        String querySQL = "SELECT SUM(costo) AS SUMA\n"
                + "FROM pago_visita";
        data = db.sqlDatos(querySQL);
        try {
            while (data.next()) {  
                    suma=(int) data.getDouble("SUMA");               
            }
            lblSuma.setText(String.valueOf(suma));
        } catch (SQLException ex) {
            Logger.getLogger(InformeAsistencia.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.println("La suma es: " + data);
    }
}
