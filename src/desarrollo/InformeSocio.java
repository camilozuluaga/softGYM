/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desarrollo;

import com.toedter.calendar.JDateChooser;
import java.awt.FileDialog;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.rowset.CachedRowSet;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import logica.DB;
import java.io.File;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class InformeSocio extends javax.swing.JInternalFrame {

    /**
     * Creates new form DetalleDineroRecibido
     */
    private final Frame Ventana = null;
    private DB db = new DB();
    logica.Utilidades utilidades = new logica.Utilidades();
    CierreCaja caja = new CierreCaja();
    int idSocio;

    public InformeSocio() {
        initComponents();
        cargarDias();
        cargarDia();
        System.out.println("Fecha actual" + obtnerFechaActual());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        rTodosLosSocios = new javax.swing.JCheckBox();
        rMembresiasActivas = new javax.swing.JCheckBox();
        rSociosInactivos = new javax.swing.JCheckBox();
        rSociosActivos = new javax.swing.JCheckBox();
        cboDia = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        rExpiradas = new javax.swing.JCheckBox();
        rApuntoExpirar = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        rMembresiasInactivas = new javax.swing.JCheckBox();
        deUno = new com.toedter.calendar.JDateChooser();
        aUno = new com.toedter.calendar.JDateChooser();
        mes = new com.toedter.calendar.JMonthChooser();
        cboDiaDos = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        rSociosCumpleanos = new javax.swing.JCheckBox();
        rMembresiasActivasEnOtrasFechas = new javax.swing.JCheckBox();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Listado de Socios");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Listado de Socios ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setText("Permite visualizar el listado de los diferentes socios.");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/hoja.png"))); // NOI18N

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Exportar Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/excel.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                        .addGap(117, 117, 117)))
                .addGap(144, 144, 144)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jLabel5))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addContainerGap(47, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        buttonGroup1.add(rTodosLosSocios);
        rTodosLosSocios.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rTodosLosSocios.setText("Todos los Socios");
        rTodosLosSocios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rTodosLosSociosActionPerformed(evt);
            }
        });

        buttonGroup1.add(rMembresiasActivas);
        rMembresiasActivas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rMembresiasActivas.setText("Socios con Membresias Activas");
        rMembresiasActivas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rMembresiasActivasActionPerformed(evt);
            }
        });

        buttonGroup1.add(rSociosInactivos);
        rSociosInactivos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rSociosInactivos.setText("Socios Inactivos");
        rSociosInactivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSociosInactivosActionPerformed(evt);
            }
        });

        buttonGroup1.add(rSociosActivos);
        rSociosActivos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rSociosActivos.setText("Socios Activos");
        rSociosActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSociosActivosActionPerformed(evt);
            }
        });

        cboDia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("DIAS");

        buttonGroup1.add(rExpiradas);
        rExpiradas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rExpiradas.setText("Membresias Expiradas");
        rExpiradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rExpiradasActionPerformed(evt);
            }
        });

        buttonGroup1.add(rApuntoExpirar);
        rApuntoExpirar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rApuntoExpirar.setText("Membresias a Punto de Expirar");
        rApuntoExpirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rApuntoExpirarActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("De:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("A:");

        buttonGroup1.add(rMembresiasInactivas);
        rMembresiasInactivas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rMembresiasInactivas.setText("Socios con Membresias Inactivas");
        rMembresiasInactivas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rMembresiasInactivasActionPerformed(evt);
            }
        });

        cboDiaDos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("DIAS");

        buttonGroup1.add(rSociosCumpleanos);
        rSociosCumpleanos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rSociosCumpleanos.setText("Socios que Cumplen Años en el Mes");
        rSociosCumpleanos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSociosCumpleanosActionPerformed(evt);
            }
        });

        buttonGroup1.add(rMembresiasActivasEnOtrasFechas);
        rMembresiasActivasEnOtrasFechas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rMembresiasActivasEnOtrasFechas.setText("Membresias Inactivas en Fechas Especificas");
        rMembresiasActivasEnOtrasFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rMembresiasActivasEnOtrasFechasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(rTodosLosSocios))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(rSociosActivos)))
                                .addGap(548, 548, 548)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rExpiradas)
                                    .addComponent(rApuntoExpirar))
                                .addGap(60, 60, 60))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(28, 28, 28)
                                                .addComponent(jLabel6)
                                                .addGap(10, 10, 10)
                                                .addComponent(deUno, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(rMembresiasActivasEnOtrasFechas)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(rSociosInactivos)
                                                    .addComponent(rMembresiasActivas)
                                                    .addComponent(rMembresiasInactivas)))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabel7)
                                        .addGap(17, 17, 17)
                                        .addComponent(aUno, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(26, 26, 26)
                                .addComponent(rSociosCumpleanos)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mes, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cboDia, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cboDiaDos, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rTodosLosSocios)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(3, 3, 3)
                                            .addComponent(jLabel4))))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(rSociosActivos))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cboDiaDos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(3, 3, 3)
                                                        .addComponent(jLabel8)))))
                                        .addGap(2, 2, 2))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rExpiradas))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(rApuntoExpirar)))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rMembresiasActivasEnOtrasFechas)
                                    .addComponent(rSociosInactivos))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deUno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(13, 13, 13)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(aUno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(rSociosCumpleanos)
                                .addComponent(mes, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(rMembresiasActivas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rMembresiasInactivas, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rTodosLosSociosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rTodosLosSociosActionPerformed
        // TODO add your handling code here:
        listadoTodosLosSocios();
    }//GEN-LAST:event_rTodosLosSociosActionPerformed

    private void rMembresiasActivasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rMembresiasActivasActionPerformed
        // TODO add your handling code here:
        sociosConMembresiasActivas();
    }//GEN-LAST:event_rMembresiasActivasActionPerformed

    private void rMembresiasInactivasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rMembresiasInactivasActionPerformed
        // TODO add your handling code here:
        sociosConMembresiasInactivas();
    }//GEN-LAST:event_rMembresiasInactivasActionPerformed

    private void rSociosActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSociosActivosActionPerformed
        // TODO add your handling code here:
        sociosActivos();
    }//GEN-LAST:event_rSociosActivosActionPerformed

    private void rSociosInactivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSociosInactivosActionPerformed
        // TODO add your handling code here:
        sociosInactivos();
    }//GEN-LAST:event_rSociosInactivosActionPerformed

    private void rExpiradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rExpiradasActionPerformed
        // TODO add your handling code here:
        expirarDespues();
    }//GEN-LAST:event_rExpiradasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (tabla.getColumnCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No hay datos para exportar", "Exportanto Datos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            GeneraExcel("Informe Socios");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void rApuntoExpirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rApuntoExpirarActionPerformed
        // TODO add your handling code here:
        expirarAntes();
    }//GEN-LAST:event_rApuntoExpirarActionPerformed

    private void rSociosCumpleanosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSociosCumpleanosActionPerformed
        // TODO add your handling code here:
        sociosCumplenMes();
    }//GEN-LAST:event_rSociosCumpleanosActionPerformed

    private void rMembresiasActivasEnOtrasFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rMembresiasActivasEnOtrasFechasActionPerformed
        // TODO add your handling code here:
        inactivasFechasEspecificas();
    }//GEN-LAST:event_rMembresiasActivasEnOtrasFechasActionPerformed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        if (evt.getClickCount() == 1) {
            idSocio = Integer.parseInt(tabla.getValueAt(tabla.getSelectedRow(), 0).toString());
            VerSocio verSocio = null;
            try {
                verSocio = new VerSocio(idSocio);
            } catch (SQLException ex) {
                Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
            }
            Frame.escritorio.add(verSocio);
            verSocio.toFront();
            verSocio.setVisible(true);

        }
    }//GEN-LAST:event_tablaMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser aUno;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cboDia;
    private javax.swing.JComboBox cboDiaDos;
    private com.toedter.calendar.JDateChooser deUno;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JMonthChooser mes;
    private javax.swing.JCheckBox rApuntoExpirar;
    private javax.swing.JCheckBox rExpiradas;
    private javax.swing.JCheckBox rMembresiasActivas;
    private javax.swing.JCheckBox rMembresiasActivasEnOtrasFechas;
    private javax.swing.JCheckBox rMembresiasInactivas;
    private javax.swing.JCheckBox rSociosActivos;
    private javax.swing.JCheckBox rSociosCumpleanos;
    private javax.swing.JCheckBox rSociosInactivos;
    private javax.swing.JCheckBox rTodosLosSocios;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    public void listadoTodosLosSocios() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{ "NOMBRE SOCIO", "APELLIDO SOCIO", "SEXO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT CONCAT(primer_nombre || ' ' || segundo_nombre) AS Nombre, CONCAT(primer_apellido || ' ' || segundo_apellido) AS Apellido, sexo AS Sexo, fecha_registro AS FechaRegistro "
                    + "FROM socio\n"
                    + "ORDER BY primer_apellido ASC";
            data = db.sqlDatos(querySQL);
            System.out.println("La consulta es: " + querySQL);
            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosConMembresiasActivas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{ "NOMBRE SOCIO", "APELLIDO SOCIO", "MEMBRESIA", "SEXO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, 'ACTIVA' AS Membresia, so.sexo AS Sexo, mu.fecha_registro AS FechaRegistro, md.fecha_fin_membresia AS \"FECHA FIN\"\n"
                    + "FROM socio so, membresia_usuario mu, membresia_datos md, membresia mem, usuario_sistema us\n"
                    + "WHERE so.id= mu.socio_id\n"
                    + "AND mem.id= mu.membresia_id\n"
                    + "AND us.id= mu.usuario_sistema_id\n"
                    + "AND mu.activa= TRUE\n"
                    + "AND mu.id= md.membresia_socio_id\n"
                    + "ORDER BY so.primer_apellido ASC";
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosConMembresiasInactivas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{ "NOMBRE SOCIO", "APELLIDO SOCIO", "MEMBRESIA", "SEXO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT  CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, 'INACTIVA' AS Membresia, so.sexo AS Sexo, mu.fecha_registro AS FechaRegistro, md.fecha_fin_membresia AS \"FECHA FIN\"\n"
                    + "FROM socio so, membresia_usuario mu, membresia_datos md, membresia mem, usuario_sistema us\n"
                    + "WHERE so.id= mu.socio_id\n"
                    + "AND mem.id= mu.membresia_id\n"
                    + "AND us.id= mu.usuario_sistema_id\n"
                    + "AND mu.activa= FALSE\n"
                    + "AND mu.id= md.membresia_socio_id\n";
                   // + "ORDER BY so.primer_apellido ASC";
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosActivos() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{ "NOMBRE SOCIO", "APELLIDO SOCIO", "ESTADO", "SEXO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT  CONCAT(primer_nombre || ' ' || segundo_nombre) AS Nombre, CONCAT(primer_apellido || ' ' || segundo_apellido) AS Apellido, 'Activo', sexo AS Sexo, fecha_registro AS FechaRegistro\n"
                    + "FROM socio\n"
                    + "WHERE activo = TRUE\n"
                    + "ORDER BY primer_apellido";
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosInactivos() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{ "NOMBRE SOCIO", "APELLIDO SOCIO", "ESTADO", "SEXO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT CONCAT(primer_nombre || ' ' || segundo_nombre) AS Nombre, CONCAT(primer_apellido || ' ' || segundo_apellido) AS Apellido, 'Inactivo', sexo AS Sexo, fecha_registro AS FechaRegistro\n"
                    + "FROM socio\n"
                    + "WHERE activo = FALSE\n"
                    + "ORDER BY primer_apellido";
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void inactivasFechasEspecificas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{ "NOMBRE SOCIO", "APELLIDO SOCIO", "MEMBRESIA", "SEXO", "FECHA REGISTRO"});
        try {

            String querySQL = "SELECT  CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, 'Inactiva' AS Membresia, so.sexo AS Sexo, so.fecha_registro AS FechaRegistro\n"
                    + "FROM socio so, membresia_usuario mem, membresia_datos da\n"
                    + "WHERE mem.activa = FALSE\n"
                    + "AND so.id = mem.socio_id\n"
                    + "AND da.membresia_socio_id = mem.membresia_id AND mem.fecha_registro BETWEEN '".concat(String.valueOf(obtnerFechaDe())).concat(" 00:00:00.00' AND '").concat(String.valueOf(obtnerFechaA())).concat(" 24:00:00.00'");
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sociosCumplenMes() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{ "NOMBRE SOCIO", "APELLIDO SOCIO", "FECHA NACIMIENTO"});
        try {
            int mesSelccionado = mes.getMonth() + 1;
            String querySQL = "SELECT  CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, fecha_nacimiento \n"
                    + "FROM socio so\n"
                    + "WHERE extract(month from fecha_nacimiento)=".concat(String.valueOf(mesSelccionado));
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void expirarAntes() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{ "NOMBRE SOCIO", "APELLIDO SOCIO", "SEXO", "MEMBRESÍA", "FECHA FIN MEMBRESÍA"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, sexo, m.nombre, md.fecha_fin_membresia\n"
                    + "FROM socio so, membresia_datos md, membresia_usuario mu,membresia m\n"
                    + "WHERE so.id = mu.socio_id\n"
                    + "AND mu.id = md.membresia_socio_id\n"
                    + "AND m.id = mu.membresia_id\n"
                    + "AND md.fecha_fin_membresia BETWEEN CURRENT_DATE AND CURRENT_DATE+".concat(String.valueOf(obtenerDia()));
            System.out.println("La consulta antes de expirar: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void expirarDespues() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{ "NOMBRE SOCIO", "APELLIDO SOCIO", "SEXO", "MEMBRESÍA", "FECHA FIN MEMBRESÍA"});
        try {

            String querySQL = "SELECT  CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, sexo, m.nombre, md.fecha_fin_membresia\n"
                    + "FROM socio so, membresia_datos md, membresia_usuario mu,membresia m\n"
                    + "WHERE so.id = mu.socio_id\n"
                    + "AND mu.id = md.membresia_socio_id\n"
                    + "AND m.id = mu.membresia_id\n"
                    + "AND md.fecha_fin_membresia BETWEEN CURRENT_DATE-".concat(String.valueOf(obtenerDiaDespues())) + " AND CURRENT_DATE";
            System.out.println("Despues de expirar: " + querySQL);
            data = db.sqlDatos(querySQL);

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void cargarDias() {
        for (int i = 1; i < 32; i++) {
            cboDia.addItem(i);
        }
    }

    public int obtenerDia() {
        int dia = (int) cboDia.getSelectedItem();
        return dia;
    }

    public void cargarDia() {
        for (int i = 1; i < 32; i++) {
            cboDiaDos.addItem(i);
        }
    }

    public int obtenerDiaDespues() {
        int dia = (int) cboDiaDos.getSelectedItem();
        return dia;
    }

    public String obtnerFechaActual() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH));
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));
        String hora = String.valueOf(fechaActual.get(Calendar.HOUR));
        String minutos = String.valueOf(fechaActual.get(Calendar.MINUTE));
        String segundos = String.valueOf(fechaActual.get(Calendar.SECOND));
        String mili = String.valueOf(fechaActual.get(Calendar.MILLISECOND));
        String fecha = anoo + "-" + mess + "-" + diaa + " " + hora + "" + minutos + "" + segundos + "" + mili;
        return fecha;
    }

    public String obtnerFechaDe() {
        Calendar fech = deUno.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = deUno.getCalendar().get(Calendar.YEAR);
        int mes = deUno.getCalendar().get(Calendar.MONTH) + 1;
        int dia = deUno.getCalendar().get(Calendar.DAY_OF_MONTH);
        int min = deUno.getCalendar().get(Calendar.MINUTE);
        int seg = deUno.getCalendar().get(Calendar.SECOND);
        int hora = deUno.getCalendar().get(Calendar.HOUR);
        int mili = deUno.getCalendar().get(Calendar.MILLISECOND);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        System.out.println("La fecha es: " + fecha + " " + hora + ":" + min + ":" + seg + ":" + mili);
        return fecha;
    }

    public String obtnerFechaA() {
        Calendar fech = aUno.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = aUno.getCalendar().get(Calendar.YEAR);
        int mes = aUno.getCalendar().get(Calendar.MONTH) + 1;
        int dia = aUno.getCalendar().get(Calendar.DAY_OF_MONTH);
        int min = aUno.getCalendar().get(Calendar.MINUTE);
        int seg = aUno.getCalendar().get(Calendar.SECOND);
        int hora = aUno.getCalendar().get(Calendar.HOUR);
        int mili = aUno.getCalendar().get(Calendar.MILLISECOND);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        System.out.println("La fecha es: " + fecha + " " + hora + ":" + min + ":" + seg + ":" + mili);
        return fecha;
    }

    public String comboSeleccionado() {
        String nombreArchivo = null;
        if (rSociosActivos.isSelected()) {
            nombreArchivo = "Informe_Socios_Activos";
        } else if (rApuntoExpirar.isSelected()) {
            nombreArchivo = "Informe_Socios_Membresia_Apunto_De_Expirar";
        } else if (rExpiradas.isSelected()) {
            nombreArchivo = "Informe_Socios_Membresias_Expiradas";
        } else if (rSociosCumpleanos.isSelected()) {
            nombreArchivo = "Informe_Socios_Mes_Cumpleaños";
        } else if (rSociosInactivos.isSelected()) {
            nombreArchivo = "Informe_Socios_Inactivos";
        } else if (rTodosLosSocios.isSelected()) {
            nombreArchivo = "Informe_Todos_LosSocios";
        } else if (rMembresiasActivas.isSelected()) {
            nombreArchivo = "Informe_Membresias_Activas";
        } else if (rMembresiasInactivas.isSelected()) {
            nombreArchivo = "Informe_Membresias_Inactivas";
        } else if (rMembresiasActivasEnOtrasFechas.isSelected()) {
            nombreArchivo = "Informe_Membresias_Inactivas_En_Otras_Fechas";
        }
        return nombreArchivo;
    }

    public void GeneraExcel(String informe) {
        if (tabla.getRowCount() > 0) {
            String nombre;
            FileDialog d;
            d = new FileDialog((Frame) null, "Guardar Archivo Hercules", FileDialog.SAVE);

            d.setFile(comboSeleccionado().concat(" ").concat(obtnerFechaActual()));
            d.setLocation(100, 100);
            d.setVisible(true);
            //getDirectory te permite guardar en la ubicacion que se desea
            nombre = d.getDirectory() + d.getFile();
            if (nombre != null) {
                List<JTable> tb = new ArrayList<JTable>();
                List<String> nom = new ArrayList<String>();
                tb.add(tabla);
                nom.add(informe);
                String file = nombre.concat(".xls");

                String filename = d.getFile();
                try {
                    Exporter e = new Exporter(new File(file), tb, nom);
                    if (filename != null) {
                        if (e.export()) {
                            JOptionPane.showMessageDialog(null, "Los datos fueron exportados a excel con exito", "Mensaje de Información", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ha cancelado la importacion de los datos", "Mensaje de Información", JOptionPane.CANCEL_OPTION);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se exportaron los datos" + e.getMessage(), " Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay datos en la tabla para exportar", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
        }
    }

}
