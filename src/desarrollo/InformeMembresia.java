/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desarrollo;

import com.toedter.calendar.JDateChooser;
import java.awt.FileDialog;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.rowset.CachedRowSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import logica.DB;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/**
 *
 * @author Usuario
 */
public class InformeMembresia extends javax.swing.JInternalFrame {

    /**
     * Creates new form DetalleDineroRecibido
     */
    private DB db = new DB();
    logica.Utilidades utilidades = new logica.Utilidades();
    CierreCaja caja = new CierreCaja();

    public InformeMembresia() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblTipoInforme = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        rMembresiasDisponibles = new javax.swing.JCheckBox();
        rMembresiasInactivas = new javax.swing.JCheckBox();
        rMembresiasAgregadasHoy = new javax.swing.JCheckBox();
        deUno = new com.toedter.calendar.JDateChooser();
        aUno = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rMembresiasAgregadasOtrasFechas = new javax.swing.JCheckBox();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Listado de Membresias");
        setToolTipText("");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Listado de Membresias ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setText("Permite visualizar el estado de las membresias. ");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/hoja.png"))); // NOI18N

        lblTipoInforme.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Exportar Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/excel.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTipoInforme, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(lblTipoInforme, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabla.setCellSelectionEnabled(true);
        tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(tabla);

        buttonGroup1.add(rMembresiasDisponibles);
        rMembresiasDisponibles.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rMembresiasDisponibles.setText("Lista de Membresias Disponibles");
        rMembresiasDisponibles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rMembresiasDisponiblesActionPerformed(evt);
            }
        });

        buttonGroup1.add(rMembresiasInactivas);
        rMembresiasInactivas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rMembresiasInactivas.setText("Lista de Membresias Inactivas");
        rMembresiasInactivas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rMembresiasInactivasActionPerformed(evt);
            }
        });

        buttonGroup1.add(rMembresiasAgregadasHoy);
        rMembresiasAgregadasHoy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rMembresiasAgregadasHoy.setText("Membresias Agregadas a Socios en el DÃ­a de Hoy");
        rMembresiasAgregadasHoy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rMembresiasAgregadasHoyActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("De:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("A:");

        buttonGroup1.add(rMembresiasAgregadasOtrasFechas);
        rMembresiasAgregadasOtrasFechas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rMembresiasAgregadasOtrasFechas.setText("Membresias Agregadas a Socios en otras Fechas");
        rMembresiasAgregadasOtrasFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rMembresiasAgregadasOtrasFechasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rMembresiasDisponibles)
                        .addGap(104, 104, 104)
                        .addComponent(rMembresiasAgregadasOtrasFechas)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rMembresiasInactivas)
                            .addComponent(rMembresiasAgregadasHoy))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(10, 10, 10)
                                .addComponent(deUno, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(aUno, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rMembresiasDisponibles)
                    .addComponent(rMembresiasAgregadasOtrasFechas))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(deUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(aUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(rMembresiasInactivas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rMembresiasAgregadasHoy)))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rMembresiasDisponiblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rMembresiasDisponiblesActionPerformed
        // TODO add your handling code here:
        membresiasDisponibles();
    }//GEN-LAST:event_rMembresiasDisponiblesActionPerformed

    private void rMembresiasInactivasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rMembresiasInactivasActionPerformed
        // TODO add your handling code here:
        membresiasInactivas();
    }//GEN-LAST:event_rMembresiasInactivasActionPerformed

    private void rMembresiasAgregadasHoyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rMembresiasAgregadasHoyActionPerformed
        // TODO add your handling code here:
        membresiasAgregadasHoy();
    }//GEN-LAST:event_rMembresiasAgregadasHoyActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (tabla.getColumnCount() <= 0) {
            JOptionPane.showMessageDialog(this, "No hay datos para exportar", "Exportanto Datos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            GeneraExcel("Informe Socios");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void rMembresiasAgregadasOtrasFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rMembresiasAgregadasOtrasFechasActionPerformed
        // TODO add your handling code here:
        membresiasEnOtrasFechasEspecificas();
    }//GEN-LAST:event_rMembresiasAgregadasOtrasFechasActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser aUno;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.toedter.calendar.JDateChooser deUno;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTipoInforme;
    private javax.swing.JCheckBox rMembresiasAgregadasHoy;
    private javax.swing.JCheckBox rMembresiasAgregadasOtrasFechas;
    private javax.swing.JCheckBox rMembresiasDisponibles;
    private javax.swing.JCheckBox rMembresiasInactivas;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    public void membresiasDisponibles() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE MEMBRESIA", "VALOR", "ESTADO", "FECHA DE INGRESO"});
        try {

            String querySQL = "SELECT nombre, REPLACE(CAST(valor as text), '.0', ''), 'Disponible' AS Estado, fecha_registro\n"
                    + "FROM membresia\n"
                    + "WHERE estado= TRUE";
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se encontro ninguna membresia disponible", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeMembresia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void membresiasInactivas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"MEMBRESIA", "ESTADO"});
        try {

            String querySQL = "SELECT mem.nombre, 'Inactiva'\n"
                    + "FROM membresia mem\n"
                    + "WHERE mem.estado= 'FALSE'";
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se encontro ninguna membresia inactiva", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeMembresia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void membresiasAgregadasHoy() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "COSTO", "FECHA DE INGRESO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, REPLACE(CAST(pago.pago as text), '.0', ''), pago.fecha_registro\n"
                    + "FROM socio so, pago_membresia pago\n"
                    + "WHERE so.id= pago.socio_id\n"
                    + "AND pago.saldo = 0.0"
                    + "AND pago.fecha_pago BETWEEN '".concat(obtnerFecha()).concat(" 00:00:00.00' AND '").concat(obtnerFecha()).concat(" 24:00:00.00'");
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se ha agregado ninguna membresia el dia de hoy", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeMembresia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void membresiasEnOtrasFechasEspecificas() {
        CachedRowSet data;
        DefaultTableModel tableModel = new DefaultTableModel(null, new String[]{"NOMBRE SOCIO", "APELLIDO SOCIO", "COSTO", "FECHA DE INGRESO"});
        try {

            String querySQL = "SELECT CONCAT(so.primer_nombre || ' ' || so.segundo_nombre) AS Nombre, CONCAT(so.primer_apellido || ' ' || so.segundo_apellido) AS Apellido, REPLACE(CAST(pago.pago as text), '.0', ''), pago.fecha_registro\n"
                    + "FROM socio so, pago_membresia pago\n"
                    + "WHERE so.id= pago.socio_id\n"
                    + "AND pago.saldo = 0.0"
                    + "AND pago.fecha_pago BETWEEN '".concat(String.valueOf(obtnerFechaDe())).concat(" 00:00:00.00' AND '").concat(String.valueOf(obtnerFechaA())).concat(" 24:00:00.00'");
            System.out.println("La consulta es: " + querySQL);
            data = db.sqlDatos(querySQL);
            
            if(data.size() ==0){
                JOptionPane.showMessageDialog(null, "No se encontro ninguna membresia agregada en esta fecha especifica", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            }

            tabla = logica.Utilidades.llenarTabla(data.createCopy(), tableModel, tabla);
        } catch (SQLException ex) {
            Logger.getLogger(InformeSocio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String obtnerFechaActual() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH));
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));
        String hora = String.valueOf(fechaActual.get(Calendar.HOUR));
        String minutos = String.valueOf(fechaActual.get(Calendar.MINUTE));
        String segundos = String.valueOf(fechaActual.get(Calendar.SECOND));
        String mili = String.valueOf(fechaActual.get(Calendar.MILLISECOND));
        String fecha = anoo + "-" + mess + "-" + diaa + " " + hora + "" + minutos + "" + segundos + "" + mili;
        return fecha;
    }

    public String obtnerFecha() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH));
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));

        String fecha = anoo + "-" + mess + "-" + diaa;
        return fecha;
    }

    public String fechaAyer() {

        Calendar fechaActual = new GregorianCalendar();

        String diaa = String.valueOf(fechaActual.get(Calendar.DAY_OF_MONTH) - 1);
        String mess = String.valueOf(fechaActual.get(Calendar.MONTH) + 1);
        String anoo = String.valueOf(fechaActual.get(Calendar.YEAR));

        String fecha = anoo + "-" + mess + "-" + diaa;
        return fecha;
    }

    public String obtnerFechaDe() {
        Calendar fech = deUno.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = deUno.getCalendar().get(Calendar.YEAR);
        int mes = deUno.getCalendar().get(Calendar.MONTH) + 1;
        int dia = deUno.getCalendar().get(Calendar.DAY_OF_MONTH);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        System.out.println("La fecha es: " + fecha);
        return fecha;
    }

    public String obtnerFechaA() {
        Calendar fech = aUno.getCalendar();

        JDateChooser fechas = new JDateChooser();

        int anio = aUno.getCalendar().get(Calendar.YEAR);
        int mes = aUno.getCalendar().get(Calendar.MONTH) + 1;
        int dia = aUno.getCalendar().get(Calendar.DAY_OF_MONTH);

        String diaa = String.valueOf(dia);
        String mess = String.valueOf(mes);
        String anoo = String.valueOf(anio);

        String fecha = anoo + "-" + mess + "-" + dia;
        return fecha;
    }

    public String comboSeleccionado() {
        String nombreArchivo = null;
        if (rMembresiasDisponibles.isSelected()) {
            nombreArchivo = "Informe_Membresias_Disponibles";
        } else if (rMembresiasInactivas.isSelected()) {
            nombreArchivo = "Informe_Membresias_Inactivas";
        } else if (rMembresiasAgregadasHoy.isSelected()) {
            nombreArchivo = "Informe_Membresias_Agregadas_Hoy";
        } else if (rMembresiasAgregadasOtrasFechas.isSelected()) {
            nombreArchivo = "Informe_Membresias_Agregadas_En_Otras_Fechas";
        }
        return nombreArchivo;
    }

    public void GeneraExcel(String informe) {
        if (tabla.getRowCount() > 0) {
            String nombre;
            FileDialog d;
            d = new FileDialog((Frame) null, "Guardar Archivo Hercules", FileDialog.SAVE);

            d.setFile(comboSeleccionado().concat(" ").concat(obtnerFechaActual()));
            d.setLocation(100, 100);
            d.setVisible(true);
            //getDirectory te permite guardar en la ubicacion que se desea
            nombre = d.getDirectory() + d.getFile();
            if (nombre != null) {
                List<JTable> tb = new ArrayList<JTable>();
                List<String> nom = new ArrayList<String>();
                tb.add(tabla);
                nom.add(informe);
                String file = nombre.concat(".xls");

                String filename = d.getFile();
                try {
                    Exporter e = new Exporter(new File(file), tb, nom);
                    if (filename != null) {
                        if (e.export()) {
                            JOptionPane.showMessageDialog(null, "Los datos fueron exportados a excel con exito", "Mensaje de InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ha cancelado la importacion de los datos", "Mensaje de InformaciÃ³n", JOptionPane.CANCEL_OPTION);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se exportaron los datos" + e.getMessage(), " Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay datos en la tabla para exportar", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
